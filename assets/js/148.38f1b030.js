(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{560:function(t,r,a){"use strict";a.r(r);var e=a(21),o=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"go的几个web框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go的几个web框架"}},[t._v("#")]),t._v(" go的几个web框架")]),t._v(" "),a("p",[t._v("beego，iris，gin，echo，revel")]),t._v(" "),a("h2",{attrs:{id:"为什么echo框架查找速度快"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么echo框架查找速度快"}},[t._v("#")]),t._v(" 为什么Echo框架查找速度快")]),t._v(" "),a("p",[t._v("基于 "),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Radix_tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("radix tree"),a("OutboundLink")],1),t._v(" ，Echo 的路由查询速度非常快。路由使用 "),a("a",{attrs:{href:"https://golang.org/pkg/sync/#Pool",target:"_blank",rel:"noopener noreferrer"}},[t._v("sync pool"),a("OutboundLink")],1),t._v(" 来重用内存，实现无 GC 开销下的零动态内存分配。")]),t._v(" "),a("h2",{attrs:{id:"后端常用组件有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后端常用组件有哪些"}},[t._v("#")]),t._v(" 后端常用组件有哪些")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/035db22410ccb.png",alt:"image-20210306140446654"}})]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("统一请求入口-API网关")]),t._v("（权限控制、安全、负载均衡、请求转发、监控）")]),t._v(" "),a("li",[a("strong",[t._v("统一认证中心")]),t._v("（对 APP 用户、内部用户、APP 等的认证服务）")]),t._v(" "),a("li",[a("strong",[t._v("单点登录系统")]),t._v("（只需要一次用户登录，就能够进入多个业务应用（权限可以不相同）。）")]),t._v(" "),a("li",[a("strong",[t._v("统一配置中心")]),t._v("（统一对所有业务或者基础后端服务的相关配置文件进行管理的统一服务）")]),t._v(" "),a("li",[a("strong",[t._v("服务治理框架")]),t._v("（对于外部 API 调用或者客户端对后端 API 的访问，可以使用 HTTP 协议或者 RESTful（当然也可以直接通过最原始的socket来调用）。但对于内部服务间的调用，一般都是通过 RPC 机制来调用的）")]),t._v(" "),a("li",[a("strong",[t._v("统一调度中心")]),t._v("（对所有的调度任务进行管理，这样能够统一对调度集群进行调优、扩展、任务管理等（鼻比如定时抓取数据，定时刷新订单状态））")]),t._v(" "),a("li",[a("strong",[t._v("统一日志服务")]),t._v("（使用单独的日志服务器记录日志，各个业务通过统一的日志框架将日志输出到日志服务器上）")]),t._v(" "),a("li",[a("strong",[t._v("缓存")]),t._v("（通常被用来解决热点数据的访问问题，是提高数据查询性能的强大武器）")]),t._v(" "),a("li",[a("strong",[t._v("数据库")]),t._v("（存储业务数据）")]),t._v(" "),a("li",[a("strong",[t._v("搜索引擎")]),t._v("（针对全文检索以及数据各种维度查询设计的软件）")]),t._v(" "),a("li",[a("strong",[t._v("消息队列")]),t._v("（用于传输数据，解决并发问题）")]),t._v(" "),a("li",[a("strong",[t._v("文件存储")]),t._v("（要有可靠性，容灾性和稳定性，底层使用raid方案，底层使用分布式存储）")]),t._v(" "),a("li",[a("strong",[t._v("数据分析")]),t._v("（用于分析各种数据）")]),t._v(" "),a("li",[a("strong",[t._v("故障监控")]),t._v("（分为系统监控和业务监控）")])]),t._v(" "),a("h2",{attrs:{id:"为什么mongodb读取速度比mysql快"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么mongodb读取速度比mysql快"}},[t._v("#")]),t._v(" 为什么MongoDB读取速度比MySQL快")]),t._v(" "),a("p",[t._v("写操作MongoDB比传统数据库快的根本原因是Mongo使用的内存映射技术－写入数据时候只要在内存里完成就可以返回给应用程序，这样并发量自然就很高。而保存到硬体的操作则在后台异步完成。注意MongoDB在2.4就已经是默认安全写了（具体实现在驱动程序里），所以楼上有同学的回答说是”默认不安全“应该是基于2.2或之前版本的。")]),t._v(" "),a("p",[t._v("读操作MongoDB快的原因是：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("MongoDB的设计要求你常用的数据（working set)可以在内存里装下。这样大部分操作只需要读内存，自然很快。")])]),t._v(" "),a("li",[a("p",[t._v("文档性模式设计一般会是的你所需要的数据都相对集中在一起（内存或硬盘），大家知道硬盘读写耗时最多是随机读写所产生的磁头定位时间，数据集中在一起则减少了关系性数据库需要从各个地方去把数据找过来（然后Join）所耗费的随机读时间")])])]),t._v(" "),a("p",[t._v("另外一个就是如@王子亭所提到的Mongo是分布式集群所以可以平行扩展。目前一般的百万次并发量都是通过几十上百个节点的集群同时实现。这一点MySQL基本无法做到（或者要花很大定制的代价）")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/q/1010000000616467/a-1020000000617108",target:"_blank",rel:"noopener noreferrer"}},[t._v("mongo为什么比mysql快 - SegmentFault 思否"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"mysql事务类型和隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql事务类型和隔离级别"}},[t._v("#")]),t._v(" MySQL事务类型和隔离级别")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/57fcdc0a89708.png",alt:"image-20210307084015226"}})]),t._v(" "),a("p",[t._v("事务类型和隔离级别参考："),a("a",{attrs:{href:"http://interview.xiaoyou66.com/pages/4b1eef/",target:"_blank",rel:"noopener noreferrer"}},[t._v("事务和锁 | 面试问题浓缩总结 (xiaoyou66.com)"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"数据库脏读和幻读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库脏读和幻读"}},[t._v("#")]),t._v(" 数据库脏读和幻读")]),t._v(" "),a("p",[t._v("详细参考："),a("a",{attrs:{href:"http://interview.xiaoyou66.com/pages/4b1eef/#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB",target:"_blank",rel:"noopener noreferrer"}},[t._v("事务和锁 | 面试问题浓缩总结 (xiaoyou66.com)"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"场景高效排序算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景高效排序算法"}},[t._v("#")]),t._v(" 场景高效排序算法")]),t._v(" "),a("p",[t._v("堆排序，快速排序，归并排序")]),t._v(" "),a("h2",{attrs:{id:"计算机网络七层协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络七层协议"}},[t._v("#")]),t._v(" 计算机网络七层协议")]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:"http://interview.xiaoyou66.com/pages/6bb966/#%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("体系结构 | 面试问题浓缩总结 (xiaoyou66.com)"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"tcp和udp的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp的区别"}},[t._v("#")]),t._v(" TCP和UDP的区别")]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:"http://interview.xiaoyou66.com/pages/aa48b8/",target:"_blank",rel:"noopener noreferrer"}},[t._v("运输层(TCP,UDP) | 面试问题浓缩总结 (xiaoyou66.com)"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"go-context包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-context包"}},[t._v("#")]),t._v(" Go context包")]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:"http://interview.xiaoyou66.com/pages/b71ee4/",target:"_blank",rel:"noopener noreferrer"}},[t._v("并发编程 | 面试问题浓缩总结 (xiaoyou66.com)"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"动态数组扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态数组扩容"}},[t._v("#")]),t._v(" 动态数组扩容")]),t._v(" "),a("blockquote",[a("p",[t._v("（这里指o1时间用下标访问）")])]),t._v(" "),a("p",[a("strong",[t._v("动态数组")]),t._v(" 是一种动态存储的线性表，所有元素的内存地址都是连续的。（我之前理解的是链表，实际上动态数组是线性表的。。。）")]),t._v(" "),a("p",[t._v("Go的扩容是不足1024的，双倍扩容，超过1024的，1.25倍扩容。")]),t._v(" "),a("p",[t._v("Java的ArrayList扩容是初始容量在Java 8中为10。当第11个数据需要添加时候，扩容1.5倍。这个1.5倍在ArrayList很巧妙，用了整数移位的方式。")]),t._v(" "),a("h2",{attrs:{id:"http协议常见header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http协议常见header"}},[t._v("#")]),t._v(" HTTP协议常见Header")]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:"http://interview.xiaoyou66.com/pages/9319f2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("应用层(HTTP,SMTP) | 面试问题浓缩总结 (xiaoyou66.com)"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"执行一段go代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行一段go代码"}},[t._v("#")]),t._v(" 执行一段Go代码")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/7032f385c745a.png",alt:"image-20210306093951952"}})]),t._v(" "),a("p",[t._v("自己居然还猜错了。。。。太傻了")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("说到底就是自己对底层理解还是太差了，自己想太多了。。。然后面试官第二个问题都没问。。。")])])}),[],!1,null,null,null);r.default=o.exports}}]);