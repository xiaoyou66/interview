(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{474:function(s,t,a){"use strict";a.r(t);var n=a(21),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"mongodb集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mongodb集群"}},[s._v("#")]),s._v(" MongoDB集群")]),s._v(" "),a("p",[s._v("MongoDB有三种集群的搭建方式")]),s._v(" "),a("ul",[a("li",[s._v("Replica Set 副本集")]),s._v(" "),a("li",[s._v("Sharding 切片")]),s._v(" "),a("li",[s._v("Master-Slaver 主从（不推荐使用）")])]),s._v(" "),a("p",[s._v("其中，Sharding集群也是三种集群中最复杂的。副本集比起主从可以实现故障转移！！非常使用！")]),s._v(" "),a("p",[s._v("mongoDB目前已不推荐使用主从模式，取而代之的是副本集模式。副本集其实一种互为主从的关系，可理解为主主。\n副本集指将数据复制，多份保存，不同服务器保存同一份数据，在出现故障时自动切换。对应的是数据冗余、备份、镜像、读写分离、高可用性等关键词；\n而分片则指为处理大量数据，将数据分开存储，不同服务器保存不同的数据，它们的数据总和即为整个数据集。追求的是高性能。")]),s._v(" "),a("p",[s._v("在生产环境中，通常是这两种技术结合使用，分片+副本集。")]),s._v(" "),a("p",[s._v("下面来简单说一下这几种配置方法")]),s._v(" "),a("h3",{attrs:{id:"主从复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主从复制"}},[s._v("#")]),s._v(" 主从复制")]),s._v(" "),a("p",[s._v("主从复制是"),a("a",{attrs:{href:"http://lib.csdn.net/base/mongodb",target:"_blank",rel:"noopener noreferrer"}},[s._v("MongoDB"),a("OutboundLink")],1),s._v("最常用的复制方式,也是一个简单的"),a("a",{attrs:{href:"http://lib.csdn.net/base/mysql",target:"_blank",rel:"noopener noreferrer"}},[s._v("数据库"),a("OutboundLink")],1),s._v("同步备份的集群技术,这种方式很灵活.可用于备份,故障恢复,读扩展等. 最基本的设置方式就是建立一个主节点和一个或多个从节点,每个从节点要知道主节点的地址。采用双机备份后主节点挂掉了后从节点可以接替主机继续服务。所以这种模式比单节点的高可用性要好很多。")]),s._v(" "),a("p",[s._v("实现原理")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("在主从结构中，主节点的操作记录成为oplog（operation log）。oplog存储在一个系统数据库local的集合oplog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$main中，这个集合的每个文档都代表主节点上执行的一个操作。 \n从服务器会定期从主服务器中获取oplog记录，然后在本机上执行！对于存储oplog的集合，MongoDB采用的是固定集合，也就是说随着操作过多，新的操作会覆盖旧的操作！\n\n主从复制的其他设置项\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("only             从节点指定复制某个数据库"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("默认是复制全部数据库 \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("slavedelay       "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("从节点设置主数据库同步数据的延迟")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("单位是秒"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("fastsync         从节点以主数据库的节点快照为节点启动从数据库 \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("autoresync       "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("从节点如果不同步则从新同步数据库")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("即选择当通过热添加了一台从服务器之后，从服务器选择是否更新主服务器之间的数据"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("oplogSize        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("主节点设置oplog的大小")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("主节点操作记录存储到local的oplog中"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"副本集-replica-sets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#副本集-replica-sets"}},[s._v("#")]),s._v(" 副本集  Replica Sets")]),s._v(" "),a("p",[s._v("mongodb 不推荐主从复制,推荐建立副本集(Replica Set)来保证1个服务挂了,可以有其他服务顶上,程序正常运行,几个服务的数据都是一样的,后台自动同步。")]),s._v(" "),a("p",[s._v('主从复制其实就是一个单副本的应用，没有很好的扩展性饿容错性。然而副本集具有多个副本保证了容错性，就算一个副本挂掉了还有很多个副本存在，并且解决了"主节点挂掉后，整个集群内会自动切换"的问题。')]),s._v(" "),a("p",[s._v("副本集比传统的Master-Slave主从复制有改进的地方就是它可以进行故障的自动转移,如果我们停掉复制集中的一个成员,那么剩余成员会再自动选举一个成员,作为主库。")]),s._v(" "),a("p",[s._v("Replica Set 使用的是 n 个 mongod 节点,构建具备自动的容错功能(auto-failover),自动恢复的(auto-recovery)的高可用方案。使用 Replica Set 来实现读写分离。通过在连接时指定或者在主库指定 slaveOk,由Secondary 来分担读的压力,Primary 只承担写操作。对于 Replica Set 中的 secondary 节点默认是不可读的。")]),s._v(" "),a("p",[s._v("实现原理")]),s._v(" "),a("p",[s._v("MongoDB 的副本集不同于以往的主从模式。 在集群Master故障的时候,副本集可以自动投票,选举出新的Master,并引导其余的Slave服务器连接新的Master,而这个过程对于应用是透明的。可以说MongoDB的副本集 是自带故障转移功能的主从复制。 相对于传统主从模式的优势 传统的主从模式,需要手工指定集群中的 Master。如果 Master 发生故障,一般都是人工介入,指定新的 Master。 这个过程对于应用一般不是透明的,往往伴随着应用重 新修改配置文件,重启应用服务器等。而 MongoDB 副本集,集群中的任何节点都可能成为 Master 节点。一旦 Master 节点故障,则会在其余节点中选举出一个新的 Master 节点。 并引导剩余节点连接到新的 Master 节点。这个过程对于应用是透明的。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/06/778f8524058a5.png",alt:"image.png"}})]),s._v(" "),a("p",[s._v("一个副本集即为服务于同一数据集的多个 MongoDB 实例,其中一个为主节点,其余的都为从节点。主节 点上能够完成读写操作,从节点仅能用于读操作。主节点需要记录所有改变数据库状态的操作,这些记录 保存在 oplog 中,这个"),a("a",{attrs:{href:"https://cloud.tencent.com/product/cfs?from=10680",target:"_blank",rel:"noopener noreferrer"}},[s._v("文件存储"),a("OutboundLink")],1),s._v("在 local 数据库,各个从节点通过此 oplog 来复制数据并应用于本地,保持 本地的数据与主节点的一致。oplog 具有幂等性,即无论执行几次其结果一致,这个比 mysql 的二进制日 志更好用。 集群中的各节点还会通过传递心跳信息来检测各自的健康状况。当主节点故障时,多个从节点会触发一次 新的选举操作,并选举其中的一个成为新的主节点(通常谁的优先级更高,谁就是新的主节点),心跳信 息默认每 2 秒传递一次。")]),s._v(" "),a("p",[s._v("客户端连接到副本集后，不关心具体哪一台机器是否挂掉。主服务器负责整个副本集的读写，副本集定期同步数据备份。一旦主节点挂掉，副本节点就会选举一个新的主服务器。这一切对于应用服务器不需要关心。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("心跳检测：\n整个集群需要保持一定的通信才能知道哪些节点活着哪些节点挂掉。mongodb节点会向副本集中的其他节点每两秒就会发送一次pings包，如果其他节点在"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("秒钟之内没有返回就标示为不能访问。每个节点内部都会维护一个状态映射表，表明当前每个节点是什么角色、日志时间戳等关键信息。如果是主节点，除了维护映射表\n外还需要检查自己能否和集群中内大部分节点通讯，如果不能则把自己降级为secondary只读节点。\n\n数据同步\n副本集同步分为初始化同步和keep复制。初始化同步指全量从主节点同步数据，如果主节点数据量比较大同步时间会比较长。而keep复制指初始化同步过后，节点\n之间的实时同步一般是增量同步。初始化同步不只是在第一次才会被处罚，有以下两种情况会触发：\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）secondary第一次加入，这个是肯定的。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）secondary落后的数据量超过了oplog的大小，这样也会被全量复制。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("副本集包括三种节点:主节点、从节点、仲裁节点")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）主节点负责处理客户端请求"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("读、写数据"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 记录在其上所有操作的 oplog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）从节点定期轮询主节点获取这些操作"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("然后对自己的数据副本执行这些操作"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("从而保证从节点的数据与主节点一致。默认情况下"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("从节点不支持外部读取"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("但可以设置"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   副本集的机制在于主节点出现故障的时候"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("余下的节点会选举出一个新的主节点"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("从而保证系统可以正常运行。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("）仲裁节点不复制数据"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("仅参与投票。由于它没有访问的压力"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("比较空闲"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("因此不容易出故障。由于副本集出现故障的时候"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("存活的节点必须大于副本集节点总数的一半"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n   否则无法选举主节点"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("或者主节点会自动降级为从节点"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("整个副本集变为只读。因此"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("增加一个不容易出故障的仲裁节点"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("可以增加有效选票"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("降低整个副本集不可用的\n   风险。仲裁节点可多于一个。也就是说只参与投票，不接收复制的数据，也不能成为活跃节点。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("官方推荐MongoDB副本节点最少为3台， 建议副本集成员为奇数，最多12个副本节点,最多7个节点参与选举。限制副本节点的数量,主要是因为一个集群中过多的副本节点,增加了复制的成本,反而拖累了集群 的整体性能。 太多的副本节点参与选举,也会增加选举的时间。而官方建议奇数的节点,是为了避免脑裂 的发生。")]),s._v(" "),a("p",[s._v("副本集工作流程")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("在 MongoDB 副本集中"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("主节点负责处理客户端的读写请求"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("备份节点则负责映射主节点的 数据。备份节点的工作原理过程可以大致描述为"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("备份节点定期轮询主节点上的数据操作"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n然后对 自己的数据副本进行这些操作"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("从而保证跟主节点的数据同步。至于主节点上的所有 数据库状态改变 的操作"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("都会存放在一张特定的系统表中。备份节点则是根据这些数据进\n行自己的数据更新。\n\noplog\n上面提到的数据库状态改变的操作"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("称为 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("oplog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("operation log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("主节点操作记录"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("。oplog 存储在 local 数据库的"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"oplog.rs"')]),s._v("表中。副本集中备份节点异步的从主节点同步 oplog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("然后重新 执行它记录的操作"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("以此达到了数据同步的作用。\n关于 oplog 有几个注意的地方"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）oplog 只记录改变数据库状态的操作\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）存储在 oplog 中的操作并不是和主节点执行的操作完全一样"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("例如"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$inc"')]),s._v("操作就会转化为"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$set"')]),s._v("操作\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("）oplog "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("存储在固定集合中")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("capped collection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("当 oplog 的数量超过 oplogSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("新的操作就会覆盖就的操作\n\n数据同步\n在副本集中"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("有两种数据同步方式"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）initial "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("初始化"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("这个过程发生在当副本集中创建一个新的数据库或其中某个节点刚从宕机中恢复"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("或者向副本集中添加新的成员的时候"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("默认的"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("副本集中的节点会从离 它最近\n   的节点复制 oplog 来同步数据"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("这个最近的节点可以是 primary 也可以是拥有最新 oplog 副本的 secondary 节点。该操作一般会重新初始化备份节点"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("开销较大。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("）replication")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("复制"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("在初始化后这个操作会一直持续的进行着"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("以保持各个 secondary 节点之间的数据同步。\n\ninitial sync\n当遇到无法同步的问题时"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("只能使用以下两种方式进行 initial sync 了\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）第一种方式就是停止该节点"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("然后删除目录中的文件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("重新启动该节点。这样"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("这个节 点就会执行 initial sync\n   注意"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("通过这种方式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("sync 的时间是根据数据量大小的"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("如果数据量过大"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("sync 时间就 会很长\n   同时会有很多网络传输"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("可能会影响其他节点的工作\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）第二种方式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("停止该节点"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("然后删除目录中的文件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("找一个比较新的节点"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("然后把该节点目 录中的文件拷贝到要 sync 的节点目录中\n通过上面两种方式中的一种"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("都可以重新恢复"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"port=33333"')]),s._v("的节点。不在进行截图了。\n\n副本集管理\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）查看oplog的信息 通过"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"db.printReplicationInfo()"')]),s._v("命令可以查看 oplog 的信息\n   字段说明"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n   configured oplog size"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" oplog 文件大小\n   log length start to end"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("     oplog 日志的启用时间段\n   oplog first event time"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("      第一个事务日志的产生时间\n   oplog last event time"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("       最后一个事务日志的产生时间\n   now"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("                         现在的时间\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）查看 slave 状态 通过"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"db.printSlaveReplicationInfo()"')]),s._v("可以查看 slave 的同步状态\n  当插入一条新的数据"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("然后重新检查 slave 状态时"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("就会发现 sync 时间更新了\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("h3",{attrs:{id:"分片集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分片集群"}},[s._v("#")]),s._v(" 分片集群")]),s._v(" "),a("p",[s._v("Sharding cluster是一种可以水平扩展的模式,在数据量很大时特给力,实际大规模应用一般会采用这种架构去构建。sharding分片很好的解决了单台服务器磁盘空间、内存、cpu等硬件资源的限制问题，把数据水平拆分出去，降低单节点的访问压力。每个分片都是一个独立的数据库，所有的分片组合起来构成一个逻辑上的完整的数据库。因此，分片机制降低了每个分片的数据操作量及需要存储的数据量，达到多台服务器来应对不断增加的负载和数据的效果。")]),s._v(" "),a("p",[s._v("参考：")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1026185",target:"_blank",rel:"noopener noreferrer"}},[s._v("Mongodb主从复制/ 副本集/分片集群介绍 - 云+社区 - 腾讯云 (tencent.com)"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);