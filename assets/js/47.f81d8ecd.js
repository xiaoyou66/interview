(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{461:function(t,a,_){"use strict";_.r(a);var v=_(21),s=Object(v.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"sql语句分为哪几类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#sql语句分为哪几类"}},[t._v("#")]),t._v(" SQL语句分为哪几类")]),t._v(" "),_("p",[_("strong",[t._v("数据定义语言DDL")]),t._v("（Data Ddefinition Language）CREATE，DROP，ALTER")]),t._v(" "),_("blockquote",[_("p",[t._v("主要为以上操作 即对逻辑结构等有操作的，其中包括表结构，视图和索")])]),t._v(" "),_("p",[_("strong",[t._v("数据查询语言DQL")]),t._v("（Data Query Language）SELECT")]),t._v(" "),_("blockquote",[_("p",[t._v("即查询操作，以select关键字。各种简单查询，连接查询等 都属于DQL。")])]),t._v(" "),_("p",[_("strong",[t._v("数据操纵语言DML")]),t._v("（Data Manipulation Language）INSERT，UPDATE，DELETE")]),t._v(" "),_("blockquote",[_("p",[t._v("对数据进行操作的，对应上面所说的查询操作 DQL与DML共同构建了多数初级程序员常用的增删改查操作。而查询是较为特殊的一种 被划分到DQL中。")])]),t._v(" "),_("p",[_("strong",[t._v("数据控制功能DCL")]),t._v("（Data Control Language）GRANT，REVOKE，COMMIT，ROLLBACK")]),t._v(" "),_("blockquote",[_("p",[t._v("即对数据库安全性完整性等有操作的，可以简单的理解为权限控制等。")])]),t._v(" "),_("h2",{attrs:{id:"约束类型-constraint"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#约束类型-constraint"}},[t._v("#")]),t._v(" 约束类型（Constraint）")]),t._v(" "),_("p",[t._v("主键（Primary Key）约束，唯一约束（Unique），检查约束，非空约束，外键（Foreign Key）约束。")]),t._v(" "),_("h3",{attrs:{id:"sql约束"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#sql约束"}},[t._v("#")]),t._v(" SQL约束")]),t._v(" "),_("ul",[_("li",[t._v("NOT NULL: 用于控制字段的内容一定不能为空（NULL）。")]),t._v(" "),_("li",[t._v("UNIQUE: 控件字段内容不能重复，一个表允许有多个 Unique 约束。")]),t._v(" "),_("li",[t._v("PRIMARY KEY: 也是用于控件字段内容不能重复，但它在一个表只允许出现一个。")]),t._v(" "),_("li",[t._v("FOREIGN KEY: 用于预防破坏表之间连接的动作，也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。")]),t._v(" "),_("li",[t._v("CHECK: 用于控制字段的值范围。")])]),t._v(" "),_("h2",{attrs:{id:"超键、候选键、主键、外键"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#超键、候选键、主键、外键"}},[t._v("#")]),t._v(" 超键、候选键、主键、外键")]),t._v(" "),_("ul",[_("li",[t._v("超键：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。")]),t._v(" "),_("li",[t._v("候选键：是最小超键，即没有冗余元素的超键。")]),t._v(" "),_("li",[t._v("主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）。")]),t._v(" "),_("li",[t._v("外键：在一个表中存在的另一个表的主键称此表的外键。")])]),t._v(" "),_("h2",{attrs:{id:"关联查询"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#关联查询"}},[t._v("#")]),t._v(" 关联查询")]),t._v(" "),_("p",[t._v("用下面这个表作为例子")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/b2c3f27876c06.png",alt:"image-20210308110142524"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/d73aabf09181e.png",alt:"image-20210308110150674"}})]),t._v(" "),_("h3",{attrs:{id:"交叉连接-cross-join"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#交叉连接-cross-join"}},[t._v("#")]),t._v(" 交叉连接（CROSS JOIN）")]),t._v(" "),_("p",[t._v("也叫笛卡尔积，说的通俗点就是R表中每个元素分别和S表中的每个元素进行连接，所以总记录数有3*3=9条")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/c04039695eb0d.png",alt:"image-20210308110409674"}})]),t._v(" "),_("h3",{attrs:{id:"内连接-inner-join"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内连接-inner-join"}},[t._v("#")]),t._v(" 内连接（INNER JOIN）")]),t._v(" "),_("p",[t._v("其实就是返回两个表中相同的部分（两个集合的交集），因为S和R是通过C产生关系的，所以我们这里就是找到两个中相同的部分（这里就是C1和C2了，R和S中都有）")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/9ff6f29df0d1d.png",alt:"image-20210308110449422"}})]),t._v(" "),_("h3",{attrs:{id:"外连接-left-join-right-join"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#外连接-left-join-right-join"}},[t._v("#")]),t._v(" 外连接（LEFT JOIN/RIGHT JOIN）")]),t._v(" "),_("p",[t._v("包括左连接和右连接")]),t._v(" "),_("h4",{attrs:{id:"左连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#左连接"}},[t._v("#")]),t._v(" 左连接")]),t._v(" "),_("p",[t._v("左连接其实就是左边保持完整，然后右边根据内连接的规则把其余的部分补齐")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/6a38f1ccdb23f.png",alt:"image-20210308110507582"}})]),t._v(" "),_("h3",{attrs:{id:"右连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#右连接"}},[t._v("#")]),t._v(" 右连接")]),t._v(" "),_("p",[t._v("右连接和左连接相反")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/42ff6d36a6faf.png",alt:"image-20210308110521789"}})]),t._v(" "),_("h3",{attrs:{id:"联合查询-union与union-all"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#联合查询-union与union-all"}},[t._v("#")]),t._v(" 联合查询（UNION与UNION ALL）")]),t._v(" "),_("p",[t._v("联合查询和子查询是相反的操作，就是将多次查询(多条select语句), 在记录上进行拼接(字段不会增加)")]),t._v(" "),_("p",[t._v("下面这三个图就很好的解释了，什么是联合查询。（UNION ALL其实就是保留所有，UNION会进行去重操作）")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/c1a32a556a4fa.png",alt:"image-20210322160843640"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/dd3978afaf4a1.png",alt:"image-20210322160906004"}})]),t._v(" "),_("h4",{attrs:{id:"union与union-all的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#union与union-all的区别"}},[t._v("#")]),t._v(" UNION与UNION ALL的区别")]),t._v(" "),_("ul",[_("li",[t._v("如果使用UNION ALL，不会合并重复的记录行")]),t._v(" "),_("li",[t._v("从效率上说，UNION ALL 要比UNION快很多，所以，如果可以确认合并的两个结果集中不包含重复数据且不需要排序时的话，那么就使用UNION ALL。")])]),t._v(" "),_("h3",{attrs:{id:"全连接-full-join"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#全连接-full-join"}},[t._v("#")]),t._v(" 全连接（FULL JOIN）")]),t._v(" "),_("p",[t._v("MySQL不支持，Oracle支持")]),t._v(" "),_("p",[t._v("其实就是左右连接结合，把所有的数据全部连接到一起")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/db4ffd8c5f46a.png",alt:"image-20210308110543435"}})]),t._v(" "),_("h2",{attrs:{id:"子查询"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#子查询"}},[t._v("#")]),t._v(" 子查询")]),t._v(" "),_("p",[t._v("有下面两种情况")]),t._v(" "),_("ol",[_("li",[t._v("条件：一条SQL语句的查询结果做为另一条查询语句的条件或查询结果")]),t._v(" "),_("li",[t._v("嵌套：多条SQL语句嵌套使用，内部的SQL查询语句称为子查询。")])]),t._v(" "),_("h2",{attrs:{id:"in和exists区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#in和exists区别"}},[t._v("#")]),t._v(" in和exists区别")]),t._v(" "),_("p",[t._v("in语句是把"),_("strong",[t._v("外表和内表作hash 连接")]),t._v("，而exists语句是"),_("strong",[t._v("对外表作loop循环，每次loop循环再对内表进行查询")]),t._v("。一直大家都认为exists比in语句的效率要高，这种说法其实是不准确的。这个是要区分环境的。")]),t._v(" "),_("ul",[_("li",[t._v("如果查询的两个表大小相当，那么用in和exists差别不大。")]),t._v(" "),_("li",[t._v("如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in。")]),t._v(" "),_("li",[t._v("not in 和not exists：如果查询语句使用了not in，那么内外表都进行全表扫描，没有用到索引；而not extsts的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。")])]),t._v(" "),_("h2",{attrs:{id:"drop-delete-truncate的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#drop-delete-truncate的区别"}},[t._v("#")]),t._v(" Drop/Delete/Truncate的区别")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("Delete")]),t._v("用来删除表的全部或者"),_("strong",[t._v("部分数据")]),t._v("，执行delete之后，用户"),_("strong",[t._v("需要提交")]),t._v("之后才会执行，会触发表上的DELETE"),_("strong",[t._v("触发器")]),t._v("（包含一个OLD的虚拟表，可以只读访问被删除的数据），DELETE之后表结构还在，删除很慢，一行一行地删，因为会记录日志，可以利用日志还原数据；")]),t._v(" "),_("li",[_("strong",[t._v("Truncate")]),t._v("删除表中的所有数据，这个操作"),_("strong",[t._v("不能回滚")]),t._v("，也不会触发这个表上的触发器。操作比DELETE快很多（直接把表drop掉，再创建一个新表，删除的数据不能找回）。如果表中有自增（AUTO_INCREMENT）列，则重置为1；")]),t._v(" "),_("li",[_("strong",[t._v("Drop")]),t._v("命令从数据库中"),_("strong",[t._v("删除表")]),t._v("，所有的数据行，索引和约束都会被删除；不能回滚，不会触发触发器；")])]),t._v(" "),_("h2",{attrs:{id:"sql生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#sql生命周期"}},[t._v("#")]),t._v(" SQL生命周期")]),t._v(" "),_("ol",[_("li",[t._v("应用服务器与数据库服务器建立一个连接")]),t._v(" "),_("li",[t._v("数据库进程拿到请求sql")]),t._v(" "),_("li",[t._v("解析并生成执行计划，执行")]),t._v(" "),_("li",[t._v("读取数据到内存并进行逻辑处理")]),t._v(" "),_("li",[t._v("通过步骤一的连接，发送结果到客户端")]),t._v(" "),_("li",[t._v("关掉连接，释放资源")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/21/f4ce11a2fe0ea.png",alt:"image-20210308112416931"}})]),t._v(" "),_("h2",{attrs:{id:"大表查询如何优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大表查询如何优化"}},[t._v("#")]),t._v(" 大表查询如何优化")]),t._v(" "),_("ul",[_("li",[t._v("优化shema、sql语句+索引；")]),t._v(" "),_("li",[t._v("加缓存，memcached, redis；")]),t._v(" "),_("li",[t._v("主从复制，读写分离；")]),t._v(" "),_("li",[t._v("垂直拆分，根据你模块的耦合度，将一个大的系统分为多个小的系统，也就是分布式系统；")]),t._v(" "),_("li",[t._v("水平切分，针对数据量大的表（比较麻烦）")])]),t._v(" "),_("h2",{attrs:{id:"mysql分页"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql分页"}},[t._v("#")]),t._v(" MySQL分页")]),t._v(" "),_("p",[_("code",[t._v("LIMIT")]),t._v(" 接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。初始记录行的偏移量是 0(而不是 1)")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("mysql> SELECT * FROM table LIMIT 5,10; // 检索记录行 6-15\nmysql> SELECT * FROM table LIMIT 95,-1; // 检索记录行 96-last. \nmysql> SELECT * FROM table LIMIT 5; //检索前 5 个记录行 \n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br")])]),_("h3",{attrs:{id:"超大分页处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#超大分页处理"}},[t._v("#")]),t._v(" 超大分页处理")]),t._v(" "),_("ol",[_("li",[t._v("数据库层面可以优化查询语句："),_("code",[t._v("select * from table where age > 20 limit 1000000,10")]),t._v("可以改成"),_("code",[t._v("select * from table where id in (select id from table where age > 20 limit 1000000,10)")]),t._v("（因为索引覆盖），如果ID是连续的，我们可以"),_("code",[t._v("select * from table where id > 1000000 limit 10")])]),t._v(" "),_("li",[t._v("从需求层面，我们可以减少这种请求，或者通过缓存来提前缓存数据")])]),t._v(" "),_("h2",{attrs:{id:"慢查询日志"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#慢查询日志"}},[t._v("#")]),t._v(" 慢查询日志")]),t._v(" "),_("p",[t._v("用于记录执行时间超过某个临界值的SQL日志，用于快速定位慢查询，为我们的优化做参考。")]),t._v(" "),_("h2",{attrs:{id:"主键使用自增id还是uuid"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#主键使用自增id还是uuid"}},[t._v("#")]),t._v(" 主键使用自增ID还是UUID")]),t._v(" "),_("p",[t._v("推荐使用自增ID，不要使用UUID。因为在InnoDB存储引擎中，主键索引是作为聚簇索引存在的，也就是说，主键索引的B+树叶子节点上存储了主键索引以及全部的数据(按照顺序)，如果主键索引是自增ID，那么只需要不断向后排列即可，如果是UUID，由于到来的ID与原来的大小不确定，会造成非常多的数据插入，数据移动，然后导致产生很多的内存碎片，进而造成插入性能的下降。总之，在数据量大一些的情况下，用自增主键性能会好一些。")]),t._v(" "),_("p",[t._v("如果没有主键，InnoDB会选择一个唯一键来作为聚簇索引，如果没有唯一键，会生成一个隐式的主键。")]),t._v(" "),_("h2",{attrs:{id:"字段为什么要求定义为not-null"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#字段为什么要求定义为not-null"}},[t._v("#")]),t._v(" 字段为什么要求定义为not null")]),t._v(" "),_("p",[t._v("null值会占用更多的字节，且会在程序中造成很多与预期不符的情况。")]),t._v(" "),_("h2",{attrs:{id:"数据库优化的几种方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库优化的几种方式"}},[t._v("#")]),t._v(" 数据库优化的几种方式")]),t._v(" "),_("ol",[_("li",[t._v("SQL语句优化")]),t._v(" "),_("li",[t._v("索引优化")]),t._v(" "),_("li",[t._v("表结构优化（三大范式、合适的数据类型、水平切分和垂直切分）")]),t._v(" "),_("li",[t._v("系统配置优化（添加TCP队列数，修改缓冲池大小和个数）")]),t._v(" "),_("li",[t._v("硬件优化（磁盘、CPU、内存）")])]),t._v(" "),_("h2",{attrs:{id:"sql缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#sql缓存"}},[t._v("#")]),t._v(" SQL缓存")]),t._v(" "),_("p",[t._v("MySQL查询缓存是MySQL中比较独特的一个缓存区域，用来缓存特定Query的整个结果集信息，且共享给所有客户端。为了提高完全相同的Query语句的响应速度，MySQL Server会对查询语句进行Hash计算后，把得到的hash值与Query查询的结果集对应存放在Query Cache中。当MySQL Server打开Query Cache之后，MySQL Server会对接收到的每一个SELECT 语句通过特定的Hash算法计算该Query的Hash值，然后通过该hashi值到Query Cache中去匹配。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/55947158",target:"_blank",rel:"noopener noreferrer"}},[t._v("玩转MySQL之四]MySQL缓存机制 - 知乎 (zhihu.com)"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"explan-命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#explan-命令"}},[t._v("#")]),t._v(" explan 命令")]),t._v(" "),_("p",[t._v("一般索引优化也是用到了这个命令")]),t._v(" "),_("p",[t._v("MySQL 的 EXPLAIN 命令可以查看SELECT语句的执行的计划，是 MySQL 查询优化的必备工具。")]),t._v(" "),_("p",[t._v("首先要注意以下几个注意事项")]),t._v(" "),_("ul",[_("li",[t._v("EXPLAIN不考虑触发器、存储过程或用户自定义函数对查询的影响")]),t._v(" "),_("li",[t._v("EXPLAIN不考虑缓存")]),t._v(" "),_("li",[t._v("EXPLAIN只能分析执行计划，不能显示存储引擎在执行查询过程中进行的操作")])]),t._v(" "),_("p",[t._v("我们可以直接在查询语句前面加一个explain就可以了")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/12/5bfc9fa5ab321.png",alt:"image-20210412105843239"}})]),t._v(" "),_("ul",[_("li",[t._v("id: 查询的唯一标识")]),t._v(" "),_("li",[t._v("select_type: 查询的类型")]),t._v(" "),_("li",[t._v("table: 查询的表, 可能是数据库中的表/视图，也可能是 FROM 中的子查询")]),t._v(" "),_("li",[t._v("type: 搜索数据的方法")]),t._v(" "),_("li",[t._v("possible_keys: 可能使用的索引")]),t._v(" "),_("li",[t._v("key: 最终决定要使用的key")]),t._v(" "),_("li",[t._v("key_len: 查询索引使用的字节数。通常越少越好")]),t._v(" "),_("li",[t._v("ref: 查询的列或常量")]),t._v(" "),_("li",[t._v("rows: 需要扫描的行数，估计值。通常越少越好")]),t._v(" "),_("li",[t._v("extra: 额外的信息")])]),t._v(" "),_("p",[t._v("select_type 可能的值有:")]),t._v(" "),_("ul",[_("li",[t._v("SIMPLE: 简单查询，不包含子查询和union")]),t._v(" "),_("li",[t._v("PRIMRARY: 包含子查询时的最外层查询; 使用union时的第一个查询")]),t._v(" "),_("li",[t._v("UNION: 包含union的查询中非第一个查询")]),t._v(" "),_("li",[t._v("DEPENDENT UNION: 与 UNION 相同，但依赖外层查询的结果")]),t._v(" "),_("li",[t._v("SUBQUERY: 子查询")]),t._v(" "),_("li",[t._v("DEPENDENT SUBQUERY: 依赖外层查询的子查询")]),t._v(" "),_("li",[t._v("DERIVED: 用于 FROM 中的子查询")])]),t._v(" "),_("p",[t._v("参考：")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://www.huaweicloud.com/articles/fa7c571fc20a1c972e9e970e9253569e.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL EXPLAIN 命令: 查看查询执行计划 - 华为云 (huaweicloud.com)"),_("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=s.exports}}]);