(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{532:function(t,s,a){"use strict";a.r(s);var e=a(21),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"位运算的常用技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位运算的常用技巧"}},[t._v("#")]),t._v(" 位运算的常用技巧")]),t._v(" "),a("p",[t._v("位运算是算法题里比较特殊的一种类型，它们利用二进制位运算的特性进行一些奇妙的优化 和计算。常用的位运算符号包括：“∧”按位异或、“&”按位与、“|”按位或、“∼”取反、“<<” 算术左移和“>>”算术右移。以下是一些常见的位运算特性，其中 0s 和 1s 分别表示只由 0 或 1 构成的二进制数字。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/25/2ae9ca79f7677.png",alt:"image-20210325201312662"}})]),t._v(" "),a("p",[t._v("除此之外，n & (n - 1) 可以去除 n 的位级表示中最低的那一位，例如对于二进制表示 11110100 ，减去 1 得到 11110011，这两个数按位与得到 11110000。n & (-n) 可以得到 n 的位级表示中最低 的那一位，例如对于二进制表示 11110100，取负得到 00001100，这两个数按位与得到 00000100。")]),t._v(" "),a("h2",{attrs:{id:"基础问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础问题"}},[t._v("#")]),t._v(" 基础问题")]),t._v(" "),a("h3",{attrs:{id:"汉明距离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#汉明距离"}},[t._v("#")]),t._v(" 汉明距离")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/hamming-distance/",target:"_blank",rel:"noopener noreferrer"}},[t._v("461. 汉明距离 - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/25/ac9448835f96c.png",alt:"image-20210325201524171"}})]),t._v(" "),a("p",[t._v("我太菜了，连基本的位运算都不会太难了")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hammingDistance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进行异或运算，相同为0，不同为1")]),t._v("\n   diff"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("y\n   ans"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当我们的diff为0时我们就计算完了")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" diff "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当我们这位不相同时，我们异或运算的结果就为1")]),t._v("\n      ans"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v("diff"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后我们往右移动一位")]),t._v("\n      diff"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h3",{attrs:{id:"颠倒二进制位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#颠倒二进制位"}},[t._v("#")]),t._v(" 颠倒二进制位")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-bits/",target:"_blank",rel:"noopener noreferrer"}},[t._v("190. 颠倒二进制位 - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"只出现一次的数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#只出现一次的数字"}},[t._v("#")]),t._v(" 只出现一次的数字")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/single-number/",target:"_blank",rel:"noopener noreferrer"}},[t._v("136. 只出现一次的数字 - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"二进制特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二进制特性"}},[t._v("#")]),t._v(" 二进制特性")]),t._v(" "),a("p",[t._v("利用二进制的一些特性，我们可以把位运算使用到更多问题上。 例如，我们可以利用二进制和位运算输出一个数组的所有子集。假设我们有一个长度为 n 的 数组，我们可以生成长度为 n 的所有二进制，1 表示选取该数字，0 表示不选取。这样我们就获 得了 2 n 个子集")]),t._v(" "),a("h3",{attrs:{id:"_4的幂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4的幂"}},[t._v("#")]),t._v(" 4的幂")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/power-of-four/",target:"_blank",rel:"noopener noreferrer"}},[t._v("342. 4的幂 - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/25/cebe65ce244a5.png",alt:"image-20210325202700345"}})]),t._v(" "),a("p",[t._v("。。。这题目就一行代码，感觉我好菜啊")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPowerOfFour")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1431655765")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"最大单词长度乘积"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最大单词长度乘积"}},[t._v("#")]),t._v(" 最大单词长度乘积")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/",target:"_blank",rel:"noopener noreferrer"}},[t._v("318. 最大单词长度乘积 - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"比特位计数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比特位计数"}},[t._v("#")]),t._v(" 比特位计数")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/counting-bits/",target:"_blank",rel:"noopener noreferrer"}},[t._v("338. 比特位计数 - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);