(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{429:function(t,s,a){"use strict";a.r(s);var n=a(21),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/images/2020/11/22/VuP0q.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"数据类型占用的字节数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型占用的字节数"}},[t._v("#")]),t._v(" 数据类型占用的字节数")]),t._v(" "),a("h4",{attrs:{id:"整数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整数"}},[t._v("#")]),t._v(" 整数")]),t._v(" "),a("ul",[a("li",[t._v("int 64位操作系统默认为int64,32位操作系统为int32,但是类型检查时时int")]),t._v(" "),a("li",[t._v("int8 (byte 1字节)")]),t._v(" "),a("li",[t._v("int16 (short 2字节)")]),t._v(" "),a("li",[t._v("int32 (int 4字节)")]),t._v(" "),a("li",[t._v("int64 (long 8字节)")])]),t._v(" "),a("h4",{attrs:{id:"浮点数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮点数"}},[t._v("#")]),t._v(" 浮点数")]),t._v(" "),a("ul",[a("li",[t._v("float32 (4字节 float)")]),t._v(" "),a("li",[t._v("float64 (8字节 double)")])]),t._v(" "),a("h4",{attrs:{id:"字符型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符型"}},[t._v("#")]),t._v(" 字符型")]),t._v(" "),a("p",[a("strong",[t._v("golang没有专门的char类型")]),t._v("，一般用单个byte保存单个字母字符")]),t._v(" "),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("p",[t._v("数组初始化几种方式")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("arr1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\narr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("编译器会进行下面的优化")]),t._v(" "),a("ol",[a("li",[t._v("当元素数量小于或者等于 4 个时，会直接将数组中的元素放置在栈上；")]),t._v(" "),a("li",[t._v("当元素数量大于 4 个时，会将数组中的元素放置到静态区并在运行时取出；")])]),t._v(" "),a("h2",{attrs:{id:"切片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切片"}},[t._v("#")]),t._v(" 切片")]),t._v(" "),a("p",[t._v("数组用的其实不多，更常用的是切片，也叫动态数组，长度不固定，我们可以想切片中追加元素。")]),t._v(" "),a("h3",{attrs:{id:"切片的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切片的数据结构"}},[t._v("#")]),t._v(" 切片的数据结构")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" SliceHeader "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tData "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("\n\tLen  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\tCap  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ul",[a("li",[a("code",[t._v("Data")]),t._v(" 是指向数组的指针;")]),t._v(" "),a("li",[a("code",[t._v("Len")]),t._v(" 是当前切片的长度；")]),t._v(" "),a("li",[a("code",[t._v("Cap")]),t._v(" 是当前切片的容量，即 "),a("code",[t._v("Data")]),t._v(" 数组的大小：")])]),t._v(" "),a("h3",{attrs:{id:"切片初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切片初始化"}},[t._v("#")]),t._v(" 切片初始化")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" or slice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nslice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nslice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"获取切片长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取切片长度"}},[t._v("#")]),t._v(" 获取切片长度")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("len")]),t._v(" 和 "),a("code",[t._v("cap")]),t._v(" 获取长度或者容量是切片最常见的操作")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("slice"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"切片扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切片扩容"}},[t._v("#")]),t._v(" 切片扩容")]),t._v(" "),a("ol",[a("li",[t._v("如果期望容量大于当前容量的两倍就会使用期望容量；")]),t._v(" "),a("li",[t._v("如果当前切片的长度小于 1024 就会将容量翻倍（扩容2倍）；")]),t._v(" "),a("li",[t._v("如果当前切片的长度大于 1024 就会每次增加 25% 的容量（扩容1.25倍），直到新容量大于期望容量；")]),t._v(" "),a("li",[t._v("切片的最大大小与系统位数有关，如果是64位系统那么就是math.MaxUint64，也就是2的64次方-1")])]),t._v(" "),a("h3",{attrs:{id:"切片拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切片拷贝"}},[t._v("#")]),t._v(" 切片拷贝")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("copy(a, b)")]),t._v(" 来进行拷贝，拷贝是之间把整块内存中的内容拷贝到目标的内存区域中")]),t._v(" "),a("h2",{attrs:{id:"哈希表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈希表"}},[t._v("#")]),t._v(" 哈希表")]),t._v(" "),a("p",[t._v("说白了就是map")]),t._v(" "),a("h3",{attrs:{id:"底层数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#底层数据结构"}},[t._v("#")]),t._v(" 底层数据结构")]),t._v(" "),a("p",[t._v("分为 "),a("strong",[t._v("hmap")]),t._v(" 和 "),a("strong",[t._v("bmap")]),t._v(" （也叫bucket），hmap字段如下")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://img.xiaoyou66.com/2021/03/26/f07d212949d00.png",alt:"img"}}),t._v(" "),a("p",[t._v("bmap字段结构如下")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://img.xiaoyou66.com/2021/03/26/bc0a59af5f3f5.png",alt:"img"}}),t._v(" "),a("p",[t._v("hmap里面包含buckets的数组指针，然后buckets里main就以链表的形式来存储数据")]),t._v(" "),a("p",[t._v("最后的实际构如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/26/42b8a038a8d5d.png",alt:"这里写图片描述"}})]),t._v(" "),a("p",[t._v("参考： "),a("a",{attrs:{href:"https://i6448038.github.io/2018/08/26/map-secret/",target:"_blank",rel:"noopener noreferrer"}},[t._v("解剖Go语言map底层实现 - 菜刚RyuGou的博客 (i6448038.github.io)"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"hash碰撞解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash碰撞解决方法"}},[t._v("#")]),t._v(" hash碰撞解决方法")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("开放地址法")]),t._v("  依次探测和比较数组中的元素以判断目标键值对是否存在于哈希表中")]),t._v(" "),a("li",[a("strong",[t._v("拉链法")]),t._v(" 实现拉链法一般会使用数组加上链表（go默认采用的方法）")])]),t._v(" "),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ul",[a("li",[t._v("哈希表的每个桶都只能存储 8 个键值对，一旦当前哈希的某个桶超出 8 个，新的键值对就会存储到哈希的溢出桶中。")])]),t._v(" "),a("h3",{attrs:{id:"map扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map扩容"}},[t._v("#")]),t._v(" map扩容")]),t._v(" "),a("p",[t._v("随着键值对数量的增加，溢出桶的数量和哈希的装载因子也会逐渐升高，超过一定范围就会触发扩容，扩容会将桶的 "),a("strong",[t._v("数量翻倍")]),t._v(" ，元素再分配的过程也是在调用写操作时 "),a("strong",[t._v("增量进行")]),t._v(" 的，不会造成性能的瞬时巨大抖动。")]),t._v(" "),a("p",[t._v("下面两种情况会触发扩容")]),t._v(" "),a("ol",[a("li",[t._v("装载因子已经超过 6.5；")]),t._v(" "),a("li",[t._v("哈希使用了太多溢出桶；")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("因为 Go 语言哈希的扩容不是一个原子的过程，所以 "),a("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.mapassign",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("runtime.mapassign")]),a("OutboundLink")],1),t._v(" 还需要判断当前哈希是否已经处于扩容状态，避免二次扩容造成混乱。")])]),t._v(" "),a("li",[a("p",[t._v("扩容过程不是原子的，而是通过 "),a("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.growWork",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("runtime.growWork")]),a("OutboundLink")],1),t._v(" 增量触发的")])]),t._v(" "),a("li",[a("p",[t._v("在扩容期间访问哈希表时会使用旧桶，向哈希表写入数据时会触发旧桶元素的分流。除了这种正常的扩容之外，为了解决大量写入、删除造成的内存泄漏问题，哈希引入了 "),a("code",[t._v("sameSizeGrow")]),t._v(" 这一机制，在出现较多溢出桶时会整理哈希的内存减少空间的占用。")])])]),t._v(" "),a("p",[t._v("map参考："),a("a",{attrs:{href:"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/#332-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("理解 Golang 哈希表 Map 的原理 | Go 语言设计与实现 (draveness.me)"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"并发相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发相关"}},[t._v("#")]),t._v(" 并发相关")]),t._v(" "),a("p",[t._v("Go 的 map 不是并发安全的，这是设计人员经过长期讨论做出的决定：因为大部分使用 map 的场景不需要并发读写，如果将 map 设计为并发安全的，将降低大多数程序的性能。")]),t._v(" "),a("p",[t._v("只有在更新 map 的时候，map 才是并发不安全的，全部是读操作的并发是安全的。Go 1.6 对 map 的并发读写进行了"),a("a",{attrs:{href:"https://golang.org/doc/go1.6#runtime",target:"_blank",rel:"noopener noreferrer"}},[t._v("更明确的规定"),a("OutboundLink")],1),t._v("：当一个协程正在对 map 进行写操作的时候，不能有其它协程在对同一个 map 进行操作，读和写都不行。Go 的 runtime 会对 map 的并发读写进行监测，如果发现不安全的操作直接 crash。")]),t._v(" "),a("p",[a("strong",[t._v("sync.Map")]),t._v(" 才是并发安全的，下面贴一下简单的使用方法")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sync"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//开箱即用")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sm sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Map\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//store 方法,添加元素")]),t._v("\n    sm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Store")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Load 方法，获得value")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ok"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("sm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("ok"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//LoadOrStore方法，获取或者保存")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数是一对key：value，如果该key存在且没有被标记删除则返回原先的value（不更新）和true；不存在则store，返回该value 和false")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" vv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ok"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("sm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LoadOrStore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("ok"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" vv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ok"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("sm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LoadOrStore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("ok"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//遍历该map，参数是个函数，该函数参的两个参数是遍历获得的key和value，返回一个bool值，当返回false时，遍历立刻结束。")]),t._v("\n    sm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('":"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br")])]),a("p",[t._v("参考：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.lijiaocn.com/%E7%BC%96%E7%A8%8B/2019/06/11/golang-map-concurrent.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("以Go的map是否并发安全为例，介绍最权威的Go语言资料的使用方法@小鸟技术笔记 (lijiaocn.com)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/u010230794/article/details/82143179",target:"_blank",rel:"noopener noreferrer"}},[t._v("go sync.Map使用和介绍_司隶校尉博客-CSDN博客"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),a("p",[t._v("Go 语言中的字符串只是一个只读的字节数组，下图展示了 "),a("code",[t._v('"hello"')]),t._v(" 字符串在内存中的存储方式：")]),t._v(" "),a("p",[t._v("所以底层就是一个指向数组的指针和数组的大小")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/26/f672d1d8e2f43.png",alt:"in-memory-string"}})]),t._v(" "),a("h3",{attrs:{id:"字符串拼接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串拼接"}},[t._v("#")]),t._v(" 字符串拼接")]),t._v(" "),a("p",[t._v("其实就是新开辟一个内存空间，然后把原来的字符串拷贝过去，一旦需要拼接的字符串非常大，拷贝带来的性能损失是无法忽略的。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/thisinnocence/article/details/84480669",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go语言模型：string的底层数据结构与高效操作_Life runs on code-CSDN博客_go string 底层"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"一些特殊的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些特殊的类型"}},[t._v("#")]),t._v(" 一些特殊的类型")]),t._v(" "),a("h3",{attrs:{id:"rune"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rune"}},[t._v("#")]),t._v(" rune")]),t._v(" "),a("ul",[a("li",[t._v("一种是 uint8 类型，或者叫 byte 型，代表了 ASCII 码的一个字符。")]),t._v(" "),a("li",[t._v("另一种是 rune 类型，代表一个 UTF-8 字符，当需要处理中文、日文或者其他复合字符时，则需要用到 rune 类型。rune 类型等价于 int32 类型。")])]),t._v(" "),a("p",[t._v("参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://c.biancheng.net/view/18.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go语言字符类型（byte和rune） (biancheng.net)"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"unit类型溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unit类型溢出"}},[t._v("#")]),t._v(" unit类型溢出")])])}),[],!1,null,null,null);s.default=r.exports}}]);