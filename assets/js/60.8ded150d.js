(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{475:function(s,t,a){"use strict";a.r(t);var n=a(21),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("MongoDB也是有索引的")]),s._v(" "),a("blockquote",[a("p",[s._v("索引是对数据库一列或多列值进行排序的存储结构，底层一般是一种树状结构，没有索引查询会进行全表扫描，数据量大的时候会严重降低效率。MongoDB 索引和关系型数据库相同，默认情况下 MongoDB 在一个集合创建时就对 _id 创建了唯一索引。")])]),s._v(" "),a("h2",{attrs:{id:"索引的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的类型"}},[s._v("#")]),s._v(" 索引的类型")]),s._v(" "),a("h3",{attrs:{id:"几大索引类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#几大索引类型"}},[s._v("#")]),s._v(" 几大索引类型")]),s._v(" "),a("ul",[a("li",[s._v("单键索引 (Single Field)")]),s._v(" "),a("li",[s._v("过期索引TTL （ Time To Live）")]),s._v(" "),a("li",[s._v("复合索引(Compound Index）")]),s._v(" "),a("li",[s._v("多键索引（Multikey indexes）")]),s._v(" "),a("li",[s._v("地理空间索引（Geospatial Index）")]),s._v(" "),a("li",[s._v("全文索引")]),s._v(" "),a("li",[s._v("哈希索引 （Hashed Index）")])]),s._v(" "),a("p",[s._v("下面对这些索引进行简单介绍")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("单键索引")]),s._v(" 就是单值索引，支持所有类型的单个字段索引，并且可以在文档的任何字段上定义， 对于单个字段索引，索引键的排序顺序无关紧要，因为 MongoDB 可以在任一方向读取索引。 单个例上创建索引")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("db.集合名.createIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"字段名"')]),s._v(":排序方式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1升序。-1降序")]),s._v("\ndb.集合名.getIndexes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("过期索引")]),s._v(" 是一种特殊的索引，支持文档在一段时间后自动删除，目前过期索引只能在单个字段上建立，并且类型必须是日期类型。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# expireAfterSeconds：过期时间")]),s._v("\ndb.集合名.createIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"日期字段"')]),s._v(":排序方式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("expireAfterSeconds: 秒数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("复合索引")]),s._v(" 复合索引支持基于多个字段的索引； 制作复合索引时要注意的重要事项包括：字段顺序与索引方向。这个类似于mysql的联合索引。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("db.集合名.createIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"字段名1"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" 排序方式, "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"字段名2"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" 排序方式 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 字段顺序")]),s._v("\ndb.集合名.find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"字段名1"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启用复合索引")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("复合索引可以参考一下："),a("a",{attrs:{href:"https://blog.csdn.net/leshami/article/details/53542371",target:"_blank",rel:"noopener noreferrer"}},[s._v("MongoDB 复合索引_乐沙弥的世界-CSDN博客_mongodb 复合索引"),a("OutboundLink")],1)])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("多键索引")]),s._v(" 针对数组，MongoDB 支持针对数组中每一个element 创建索引，包括 strings、numbers、nested documents；")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("地理空间索引")]),s._v(" 针对地理空间坐标数据创建索引； 2dsphere 索引，用于存储和查找球面上的点； 2d 索引，用于存储和查找平面上的点；")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("全文索引")]),s._v(" string 内容的分词查询，支持任意属性值为 string 或 string 数组，一个集合仅支持最多一个Text Index，另外中文分词不理想，推荐ES；")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("db.集合名.createIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"字段"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"text"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ndb.集合名.find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$text")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$search")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"张"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("哈希索引")]),s._v("   针对属性的哈希值进行索引查询，当要使用 Hashed index 时，MongoDB 能够自动的计算 hash 值，无需程序计算 hash 值，hash index 仅支持单个字段等于查询，不支持范围查询；")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("db.集合名.createIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"字段"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hashed"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"慢查询分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#慢查询分析"}},[s._v("#")]),s._v(" 慢查询分析")]),s._v(" "),a("p",[s._v("主要步骤如下")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("开启内置的查询分析器,记录读写操作效率")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("db.setProfilingLevel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n,m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# n的取值可选0,1,2（一般设置为1）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0表示不记录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1表示记录慢速操作,如果值为1,m不能为空，单位为ms,用于定义慢速查询的阈值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2表示记录所有的读写操作")]),s._v("\ndb.setProfilingLevel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1,500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("查询监控结果")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 导出最慢的三个")]),s._v("\ndb.system.profile.find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(".sort"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("millis:-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(".limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("explain 分析")])]),s._v(" "),a("li",[a("p",[s._v("分析慢速查询：应用程序设计不合理、数据模型设计有误、硬件配置问题、缺少索引等")])]),s._v(" "),a("li",[a("p",[s._v("解读 explain 结果，确定是否缺少索引")])])]),s._v(" "),a("h2",{attrs:{id:"索引的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的原理"}},[s._v("#")]),s._v(" 索引的原理")]),s._v(" "),a("p",[s._v("。。。差点被误导了，可能在之前是用的B-树，但是WiredTiger引擎默认的是B+树")]),s._v(" "),a("p",[s._v('耗时一上午检索，找到了几种mongodb使用B树的"强行"解释，我将其归为如下：\n既然是非sql数据库，就应该好好利用其支持文本\\复杂数据类型的优势，通过表结构的设计，保证数据库的使用者，通过单条查询就能拿到数据,而B树的遍历查询效率虽然不如B+树，但是由于非叶子节点直接就能拿到并返回数据，因此单条查询速度是快于B树的')]),s._v(" "),a("p",[s._v("以下是本人观点：\nB树的单条查询确实是会更快，但是以本人所经历的项目经验来说，mongodb的表不会都是单条查询的场景，更多的使用场景还是基于几个属性的遍历，当然这可以通过创建复合索引去加快查找速度，然而创建多个索引，本身就会极大的降低数据库写的性能，创建多个索引之后读的性能也不会对比B+树有更多的优势。\n综上，如果本人作为引擎的开发者，会选择B+树作为实现索引的数据结构，尽管这牺牲了一部分单条查询的性能，但是常用场景下查询的性能更为可靠。")]),s._v(" "),a("p",[s._v("看这篇"),a("a",{attrs:{href:"https://segmentfault.com/a/1190000039183811",target:"_blank",rel:"noopener noreferrer"}},[s._v("mongodb的索引实现该用B树还是B+树 - SegmentFault 思否"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("参考：")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://draveness.me/mongodb-wiredtiger/",target:"_blank",rel:"noopener noreferrer"}},[s._v("『浅入浅出』MongoDB 和 WiredTiger - 面向信仰编程 (draveness.me)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);