(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{437:function(v,_,a){"use strict";a.r(_);var t=a(21),e=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h3",{attrs:{id:"return和finally的执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#return和finally的执行顺序"}},[v._v("#")]),v._v(" return和finally的执行顺序")]),v._v(" "),a("p",[v._v("finally语句在return语句执行之后return返回之前执行的，所以我们先执行return的语句，然后执行final最后返回结果")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/25/7afeb0764dd37.png",alt:"image-20210318184355910"}})]),v._v(" "),a("h2",{attrs:{id:"语法相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法相关"}},[v._v("#")]),v._v(" 语法相关")]),v._v(" "),a("h3",{attrs:{id:"java泛型了解么-什么是类型擦除-介绍一下常用的通配符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java泛型了解么-什么是类型擦除-介绍一下常用的通配符"}},[v._v("#")]),v._v(" java泛型了解么？什么是类型擦除？介绍一下常用的通配符？")]),v._v(" "),a("p",[v._v("Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。")]),v._v(" "),a("p",[v._v("Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。")]),v._v(" "),a("p",[a("strong",[v._v("常用的通配符为： T，E，K，V，？")])]),v._v(" "),a("p",[v._v("本质上这些个都是通配符，没啥区别，只不过是编码时的一种约定俗成的东西。比如上述代码中的 T ，我们可以换成 A-Z 之间的任何一个 字母都可以，并不会影响程序的正常运行")]),v._v(" "),a("ul",[a("li",[v._v("？ 表示不确定的 java 类型")]),v._v(" "),a("li",[v._v("T (type) 表示具体的一个 java 类型")]),v._v(" "),a("li",[v._v("K V (key value) 分别代表 java 键值中的 Key Value")]),v._v(" "),a("li",[v._v("E (element) 代表 Element")])]),v._v(" "),a("h3",{attrs:{id:"和-equals的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和-equals的区别"}},[v._v("#")]),v._v(" == 和 equals的区别")]),v._v(" "),a("p",[a("strong",[a("code",[v._v("==")])]),v._v(" : 它的作用是判断两个对象的地址是不是相等。即判断两个对象是不是同一个对象。("),a("strong",[v._v("基本数据类型==比较的是值，引用数据类型==比较的是内存地址")]),v._v(")")]),v._v(" "),a("p",[a("strong",[a("code",[v._v("equals()")])]),v._v(" : 它的作用也是判断两个对象是否相等，它不能用于比较基本数据类型的变量。"),a("code",[v._v("equals()")]),v._v("方法存在于"),a("code",[v._v("Object")]),v._v("类中，而"),a("code",[v._v("Object")]),v._v("类是所有类的直接或间接父类。")]),v._v(" "),a("p",[a("code",[v._v("equals()")]),v._v(" 方法存在两种使用情况：")]),v._v(" "),a("ul",[a("li",[v._v("情况 1：类没有覆盖 "),a("code",[v._v("equals()")]),v._v("方法。则通过"),a("code",[v._v("equals()")]),v._v("比较该类的两个对象时，等价于通过“==”比较这两个对象。使用的默认是 "),a("code",[v._v("Object")]),v._v("类"),a("code",[v._v("equals()")]),v._v("方法。")]),v._v(" "),a("li",[v._v("情况 2：类覆盖了 "),a("code",[v._v("equals()")]),v._v("方法。一般，我们都覆盖 "),a("code",[v._v("equals()")]),v._v("方法来两个对象的内容相等；若它们的内容相等，则返回 true(即，认为这两个对象相等)。")])]),v._v(" "),a("p",[v._v("补充")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("String")]),v._v(" 中的 "),a("code",[v._v("equals")]),v._v(" 方法是被重写过的，因为 "),a("code",[v._v("Object")]),v._v(" 的 "),a("code",[v._v("equals")]),v._v(" 方法是比较的对象的内存地址，而 "),a("code",[v._v("String")]),v._v(" 的 "),a("code",[v._v("equals")]),v._v(" 方法比较的是对象的值。")]),v._v(" "),a("li",[v._v("当创建 "),a("code",[v._v("String")]),v._v(" 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 "),a("code",[v._v("String")]),v._v(" 对象。")])]),v._v(" "),a("h3",{attrs:{id:"hashcode与equals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashcode与equals"}},[v._v("#")]),v._v(" hashcode与equals")]),v._v(" "),a("p",[a("code",[v._v("hashCode()")]),v._v(" 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。"),a("code",[v._v("hashCode()")]),v._v("定义在 JDK 的 "),a("code",[v._v("Object")]),v._v(" 类中，这就意味着 Java 中的任何类都包含有 "),a("code",[v._v("hashCode()")]),v._v(" 函数。另外需要注意的是： "),a("code",[v._v("Object")]),v._v(" 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的 内存地址 转换为整数之后返回。")]),v._v(" "),a("p",[a("strong",[v._v("为什么要有 hashCode？")])]),v._v(" "),a("p",[v._v("当你把对象加入 "),a("code",[v._v("HashSet")]),v._v(" 时，"),a("code",[v._v("HashSet")]),v._v(" 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，"),a("code",[v._v("HashSet")]),v._v(" 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 "),a("code",[v._v("equals()")]),v._v(" 方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，"),a("code",[v._v("HashSet")]),v._v(" 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的 Java 启蒙书《Head First Java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。")]),v._v(" "),a("p",[a("strong",[v._v("为什么重写 "),a("code",[v._v("equals")]),v._v(" 时必须重写 "),a("code",[v._v("hashCode")]),v._v(" 方法？")])]),v._v(" "),a("p",[v._v("如果两个对象相等，则 hashcode 一定也是相同的。两个对象相等,对两个对象分别调用 equals 方法都返回 true。但是，两个对象有相同的 hashcode 值，它们也不一定是相等的 。"),a("strong",[v._v("因此，equals 方法被覆盖过，则 "),a("code",[v._v("hashCode")]),v._v(" 方法也必须被覆盖。")])]),v._v(" "),a("p",[a("strong",[v._v("为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？")])]),v._v(" "),a("p",[v._v("因为 "),a("code",[v._v("hashCode()")]),v._v(" 所使用的杂凑算法也许刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 "),a("code",[v._v("hashCode")]),v._v("。")]),v._v(" "),a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[v._v("#")]),v._v(" 数据类型")]),v._v(" "),a("p",[v._v("Java"),a("strong",[v._v("中")]),v._v("有 8 种基本数据类型")]),v._v(" "),a("table",[a("thead",[a("tr",[a("th",[v._v("基本类型")]),v._v(" "),a("th",[v._v("位数")]),v._v(" "),a("th",[v._v("字节")]),v._v(" "),a("th",[v._v("默认值")])])]),v._v(" "),a("tbody",[a("tr",[a("td",[v._v("int")]),v._v(" "),a("td",[v._v("32")]),v._v(" "),a("td",[v._v("4")]),v._v(" "),a("td",[v._v("0")])]),v._v(" "),a("tr",[a("td",[v._v("short")]),v._v(" "),a("td",[v._v("16")]),v._v(" "),a("td",[v._v("2")]),v._v(" "),a("td",[v._v("0")])]),v._v(" "),a("tr",[a("td",[v._v("long")]),v._v(" "),a("td",[v._v("64")]),v._v(" "),a("td",[v._v("8")]),v._v(" "),a("td",[v._v("0L")])]),v._v(" "),a("tr",[a("td",[v._v("byte")]),v._v(" "),a("td",[v._v("8")]),v._v(" "),a("td",[v._v("1")]),v._v(" "),a("td",[v._v("0")])]),v._v(" "),a("tr",[a("td",[v._v("char")]),v._v(" "),a("td",[v._v("16")]),v._v(" "),a("td",[v._v("2")]),v._v(" "),a("td",[v._v("'u0000'")])]),v._v(" "),a("tr",[a("td",[v._v("float")]),v._v(" "),a("td",[v._v("32")]),v._v(" "),a("td",[v._v("4")]),v._v(" "),a("td",[v._v("0f")])]),v._v(" "),a("tr",[a("td",[v._v("double")]),v._v(" "),a("td",[v._v("64")]),v._v(" "),a("td",[v._v("8")]),v._v(" "),a("td",[v._v("0d")])]),v._v(" "),a("tr",[a("td",[v._v("boolean")]),v._v(" "),a("td",[v._v("1")]),v._v(" "),a("td"),v._v(" "),a("td",[v._v("false")])])])]),v._v(" "),a("p",[v._v("注意")]),v._v(" "),a("ol",[a("li",[v._v("Java 里使用 long 类型的数据一定要在数值后面加上 "),a("strong",[v._v("L")]),v._v("，否则将作为整型解析：")]),v._v(" "),a("li",[a("code",[v._v("char a = 'h'")]),v._v("char :单引号，"),a("code",[v._v('String a = "hello"')]),v._v(" :双引号")])]),v._v(" "),a("h3",{attrs:{id:"自动装箱与拆箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动装箱与拆箱"}},[v._v("#")]),v._v(" 自动装箱与拆箱")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("装箱")]),v._v("：将基本类型用它们对应的引用类型包装起来；")]),v._v(" "),a("li",[a("strong",[v._v("拆箱")]),v._v("：将包装类型转换为基本数据类型；")])]),v._v(" "),a("h2",{attrs:{id:"方法与函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法与函数"}},[v._v("#")]),v._v(" 方法与函数")]),v._v(" "),a("h3",{attrs:{id:"java中的是值传递还是引用传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java中的是值传递还是引用传递"}},[v._v("#")]),v._v(" java中的是值传递还是引用传递")]),v._v(" "),a("p",[a("strong",[v._v("按值调用(call by value)表示方法接收的是调用者提供的值，而按引用调用（call by reference)表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。")]),v._v(" 它用来描述各种程序设计语言（不只是 Java)中方法参数传递方式。")]),v._v(" "),a("p",[v._v("Java 程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容。")]),v._v(" "),a("h3",{attrs:{id:"重载和重写的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载和重写的区别"}},[v._v("#")]),v._v(" 重载和重写的区别")]),v._v(" "),a("p",[v._v("重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理")]),v._v(" "),a("p",[v._v("重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法")]),v._v(" "),a("h3",{attrs:{id:"深拷贝-vs-浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝-vs-浅拷贝"}},[v._v("#")]),v._v(" 深拷贝 vs 浅拷贝")]),v._v(" "),a("ol",[a("li",[a("strong",[v._v("浅拷贝")]),v._v("：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。")]),v._v(" "),a("li",[a("strong",[v._v("深拷贝")]),v._v("：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。")])])])}),[],!1,null,null,null);_.default=e.exports}}]);