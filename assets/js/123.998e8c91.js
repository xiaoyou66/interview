(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{535:function(s,t,a){"use strict";a.r(t);var n=a(21),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"链表的基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的基本操作"}},[s._v("#")]),s._v(" 链表的基本操作")]),s._v(" "),a("h3",{attrs:{id:"翻转链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#翻转链表"}},[s._v("#")]),s._v(" 翻转链表")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[s._v("206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/27/60d9d0b4ccab2.png",alt:"image-20210327195739265"}})]),s._v(" "),a("p",[s._v("有递归法和非递归法这两种，先说一下递归法")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" ListNode "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     Val "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n     Next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverseList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 递归法翻转链表，这里我们需要传入头节点和前一个节点")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当头节点为空时，我们返回前一个节点")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" pre\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 先记录下一个节点")]),s._v("\n\tnext"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里我们知道前一个节点了，下面我们就翻转一下")]),s._v("\n\thead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pre\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 最后我们返回的节点")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("非递归写法如下")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverseList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下面这个是递归写法")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// return reverse(head,nil)")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 我们使用非递归写法来实现")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当head为空时我们结束循环")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 先记录下一个节点")]),s._v("\n      next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下一个节点指向前一个节点")]),s._v("\n      head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pre\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前一个节点head")]),s._v("\n      pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 然后我们head往后移")]),s._v("\n      head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" next\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" pre\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h3",{attrs:{id:"合并有序链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并有序链表"}},[s._v("#")]),s._v(" 合并有序链表")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[s._v("21. 合并两个有序链表 - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/27/7c3d96669a4ec.png",alt:"image-20210327202615217"}})]),s._v(" "),a("p",[s._v("这里同样分为递归的方法和非递归的方法，非递归的方法如下")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   dummy"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   node"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v("dummy\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不断进行遍历,有一个为空，我们就退出循环")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" l1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" l2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找到一个大的值进行拼接")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Val "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Val "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l2\n         l2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l1\n         l1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      node"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 把未接上的节点接到当前节点的后面去")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" l1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l1\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" l2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l2\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" dummy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("递归的方法如下，这个多理解吧，我也不好解释")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 递归解法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 有一个为空时，我们直接返回另一个就行了")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" l2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l1\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" l1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l2\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当l1当前的值大于l2时，我们接上l2的剩余部分")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Val "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Val "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l2\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 把l1的剩余部分合并一下")]),s._v("\n   l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h3",{attrs:{id:"两两交换链表中的节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两两交换链表中的节点"}},[s._v("#")]),s._v(" 两两交换链表中的节点")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs/",target:"_blank",rel:"noopener noreferrer"}},[s._v("24. 两两交换链表中的节点 - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"其他连表技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他连表技巧"}},[s._v("#")]),s._v(" 其他连表技巧")]),s._v(" "),a("h3",{attrs:{id:"相交链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相交链表"}},[s._v("#")]),s._v(" 相交链表")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"}},[s._v("160. 相交链表 - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)]),s._v(" "),a("h3",{attrs:{id:"回文链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回文链表"}},[s._v("#")]),s._v(" 回文链表")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/palindrome-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[s._v("234. 回文链表 - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);