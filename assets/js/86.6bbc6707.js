(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{500:function(t,a,n){"use strict";n.r(a);var s=n(21),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"springboot启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot启动"}},[t._v("#")]),t._v(" springboot启动")]),t._v(" "),n("h3",{attrs:{id:"springboot启动类上的注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot启动类上的注解"}},[t._v("#")]),t._v(" springboot启动类上的注解")]),t._v(" "),n("p",[t._v("一般来说我们的启动类需要有下面这几个注解")]),t._v(" "),n("h4",{attrs:{id:"springbootapplication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication"}},[t._v("#")]),t._v(" @SpringBootApplication")]),t._v(" "),n("p",[t._v("这个是一个非常核心的注解，我们使用springboot项目一般都是只需要开启这个就可以了，这个是一个组合注解，里面有三个非常重要的注解")]),t._v(" "),n("ul",[n("li",[t._v("@Configuration（@SpringBootConfiguration点开查看发现里面还是应用了@Configuration）")]),t._v(" "),n("li",[t._v("@EnableAutoConfiguration")]),t._v(" "),n("li",[t._v("@ComponentScan")])]),t._v(" "),n("p",[t._v("@Configuration这个注解其实就是把我们的配置类都注入到IOC容器中，一般情况下，我们有两种方式来配置")]),t._v(" "),n("p",[t._v("第一种是在xml文件中配置")]),t._v(" "),n("div",{staticClass:"language-xml line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token prolog"}},[t._v('<?xml version="1.0" encoding="UTF-8"?>')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("beans")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("xmlns")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://www.springframework.org/schema/beans"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("xmlns:")]),t._v("xsi")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://www.w3.org/2001/XMLSchema-instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("xsi:")]),t._v("schemaLocation")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("default-lazy-init")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--bean定义--\x3e")]),t._v("\n     "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("mockService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("..MockServiceImpl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t     ...\n\t "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("beans")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("p",[t._v("第二种我们可以直接加上@configuration注解")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("@Configuration \npublic class MockConfiguration{     \n\t//bean定义\n\t@Bean\n     public MockService mockService(){\n         return new MockServiceImpl();\n     }\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("p",[t._v("任何一个标注了@Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id")]),t._v(" "),n("p",[t._v("@ComponentScan下面有解释，这里就不多说了")]),t._v(" "),n("p",[t._v("@EnableAutoConfiguration下面也有解释")]),t._v(" "),n("h4",{attrs:{id:"componentscan"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#componentscan"}},[t._v("#")]),t._v(" @ComponentScan")]),t._v(" "),n("p",[t._v("@ComponentScan这个注解在Spring中很重要，它对应XML配置中的元素，@ComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义，最终将这些bean定义加载到IoC容器中。")]),t._v(" "),n("p",[t._v("我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。")]),t._v(" "),n("p",[t._v("注：所以SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages。")]),t._v(" "),n("h4",{attrs:{id:"enableautoconfiguration-注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enableautoconfiguration-注解"}},[t._v("#")]),t._v(" @EnableAutoConfiguration 注解")]),t._v(" "),n("p",[t._v("大家是否还记得Spring框架提供的各种名字为@Enable开头的Annotation定义？比如@EnableScheduling、@EnableCaching、@EnableMBeanExport等，@EnableAutoConfiguration的理念和做事方式其实一脉相承，简单概括一下就是，"),n("strong",[t._v("借助@Import的支持，收集和注册特定场景相关的bean定义。")])]),t._v(" "),n("ul",[n("li",[t._v("@EnableScheduling是通过@Import将Spring调度框架相关的bean定义都加载到IoC容器。")]),t._v(" "),n("li",[t._v("@EnableMBeanExport是通过@Import将JMX相关的bean定义加载到IoC容器。")])]),t._v(" "),n("p",[t._v("而@EnableAutoConfiguration也是借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器")]),t._v(" "),n("p",[t._v("@EnableAutoConfiguration作为一个复合Annotation，其自身定义关键信息如下：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SuppressWarnings")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deprecation"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TYPE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RUNTIME"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Inherited")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AutoConfigurationPackage")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Import")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnableAutoConfigurationImportSelector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnableAutoConfiguration")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("p",[t._v("借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，@EnableAutoConfiguration可以智能的自动配置")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/05/ae7fe073a6ba8.png",alt:"img"}})]),t._v(" "),n("p",[t._v("SpringFactoriesLoader属于Spring框架私有的一种扩展方案，其主要功能就是从指定的配置文件META-INF/spring.factories加载配置。")]),t._v(" "),n("p",[t._v("这个其实就是那个springboot的自动装配了，这个单独放到一个章节来进行讲解")]),t._v(" "),n("h4",{attrs:{id:"springbootconfiguration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springbootconfiguration"}},[t._v("#")]),t._v(" @SpringBootConfiguration")]),t._v(" "),n("p",[t._v("@SpringBootConfiguration继承自@Configuration，二者功能也一致，标注当前类是配置类，\n并会将当前类内声明的一个或多个以@Bean注解标记的方法的实例纳入到spring容器中，并且实例名就是方法名。")]),t._v(" "),n("h4",{attrs:{id:"inherited-注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#inherited-注解"}},[t._v("#")]),t._v(" @Inherited 注解")]),t._v(" "),n("p",[t._v("这个是元注解")]),t._v(" "),n("h4",{attrs:{id:"documented-注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#documented-注解"}},[t._v("#")]),t._v(" @Documented 注解")]),t._v(" "),n("p",[t._v("Documented注解表明这个注释是由 javadoc记录的，在默认情况下也有类似的记录工具。 如果一个类型声明被注释了文档化，它的注释成为公共API的一部分。")]),t._v(" "),n("h4",{attrs:{id:"retention-注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#retention-注解"}},[t._v("#")]),t._v(" @Retention() 注解")]),t._v(" "),n("p",[t._v("RetentionPolicy这个枚举类型的常量描述保留注释的各种策略，它们与元注释(@Retention)一起指定注释要保留多长时间")]),t._v(" "),n("p",[t._v("参考：")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://blog.csdn.net/qq_28289405/article/details/81302498",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot 启动类 @SpringBootApplication 注解 以及执行流程_殇莫忆的博客-CSDN博客"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.cnblogs.com/xiaoxi/p/7999885.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("spring boot(二)：启动原理解析 - 平凡希 - 博客园 (cnblogs.com)"),n("OutboundLink")],1)])]),t._v(" "),n("h3",{attrs:{id:"spring-boot启动流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot启动流程"}},[t._v("#")]),t._v(" spring boot启动流程")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/30/e2e1d50353942.jpg",alt:"preview"}})]),t._v(" "),n("p",[t._v("spring boot的run方法如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/05/40c34c3641b09.png",alt:"image.png"}})]),t._v(" "),n("p",[t._v("各个流程对应如下")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/05/874ed780ad465.png",alt:"image.png"}})]),t._v(" "),n("p",[t._v("我们将各步骤总结精炼如下：")]),t._v(" "),n("ol",[n("li",[t._v("通过 "),n("code",[t._v("SpringFactoriesLoader")]),t._v(" 加载 "),n("code",[t._v("META-INF/spring.factories")]),t._v(" 文件，获取并创建 "),n("code",[t._v("SpringApplicationRunListener")]),t._v(" 对象")]),t._v(" "),n("li",[t._v("然后由 "),n("code",[t._v("SpringApplicationRunListener")]),t._v(" 来发出 starting 消息")]),t._v(" "),n("li",[t._v("创建参数，并配置当前 SpringBoot 应用将要使用的 Environment")]),t._v(" "),n("li",[t._v("完成之后，依然由 "),n("code",[t._v("SpringApplicationRunListener")]),t._v(" 来发出 environmentPrepared 消息")]),t._v(" "),n("li",[t._v("创建 "),n("code",[t._v("ApplicationContext")])]),t._v(" "),n("li",[t._v("初始化 "),n("code",[t._v("ApplicationContext")]),t._v("，并设置 Environment，加载相关配置等")]),t._v(" "),n("li",[t._v("由 "),n("code",[t._v("SpringApplicationRunListener")]),t._v(" 来发出 "),n("code",[t._v("contextPrepared")]),t._v(" 消息，告知SpringBoot 应用使用的 "),n("code",[t._v("ApplicationContext")]),t._v(" 已准备OK")]),t._v(" "),n("li",[t._v("将各种 beans 装载入 "),n("code",[t._v("ApplicationContext")]),t._v("，继续由 "),n("code",[t._v("SpringApplicationRunListener")]),t._v(" 来发出 contextLoaded 消息，告知 SpringBoot 应用使用的 "),n("code",[t._v("ApplicationContext")]),t._v(" 已装填OK")]),t._v(" "),n("li",[t._v("refresh ApplicationContext，完成IoC容器可用的最后一步")]),t._v(" "),n("li",[t._v("由 "),n("code",[t._v("SpringApplicationRunListener")]),t._v(" 来发出 started 消息")]),t._v(" "),n("li",[t._v("完成最终的程序的启动")]),t._v(" "),n("li",[t._v("由 "),n("code",[t._v("SpringApplicationRunListener")]),t._v(" 来发出 running 消息，告知程序已运行起来了")])]),t._v(" "),n("p",[t._v("至此，全流程结束！")]),t._v(" "),n("h3",{attrs:{id:"springapplication-实例的初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springapplication-实例的初始化"}},[t._v("#")]),t._v(" SpringApplication 实例的初始化")]),t._v(" "),n("p",[t._v("关键部分如下")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/05/e3350e517b8f2.png",alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("①")]),t._v(" 推断应用的类型：创建的是 REACTIVE应用、SERVLET应用、NONE 三种中的某一种")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/05/167a8cbbc2b81.png",alt:"image.png"}})])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("②")]),t._v(" 使用 "),n("code",[t._v("SpringFactoriesLoader")]),t._v("查找并加载 classpath下 "),n("code",[t._v("META-INF/spring.factories")]),t._v("文件中所有可用的 "),n("code",[t._v("ApplicationContextInitializer")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/05/693c62c945c4f.png",alt:"image.png"}})])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("③")]),t._v(" 使用 "),n("code",[t._v("SpringFactoriesLoader")]),t._v("查找并加载 classpath下 "),n("code",[t._v("META-INF/spring.factories")]),t._v("文件中的所有可用的 "),n("code",[t._v("ApplicationListener")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/05/1cf6500908fe3.png",alt:"image.png"}})])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("④")]),t._v(" 推断并设置 main方法的定义类")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/05/6709bced98afe.png",alt:"image.png"}})])])]),t._v(" "),n("p",[t._v("参考：")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/6844903669998026759#comment",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot 应用程序启动过程探秘 (juejin.cn)"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"springboot配置文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot配置文件"}},[t._v("#")]),t._v(" springboot配置文件")]),t._v(" "),n("p",[t._v("一般来说有YAML和Properties这两种方式，默认推荐使用yaml的方式")])])}),[],!1,null,null,null);a.default=e.exports}}]);