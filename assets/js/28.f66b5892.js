(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{442:function(t,s,a){"use strict";a.r(s);var n=a(21),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("这个部分主要以面试题为主")]),t._v(" "),a("h2",{attrs:{id:"京东面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#京东面试题"}},[t._v("#")]),t._v(" 京东面试题")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/25/48f3c4e6ddd84.png",alt:"image-20210318184044844"}})]),t._v(" "),a("p",[t._v("是equals而不是equal，单词错了")]),t._v(" "),a("h2",{attrs:{id:"类和对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类和对象"}},[t._v("#")]),t._v(" 类和对象")]),t._v(" "),a("h3",{attrs:{id:"面向对象和面向过程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象和面向过程的区别"}},[t._v("#")]),t._v(" 面向对象和面向过程的区别")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("面向过程")]),t._v(" ："),a("strong",[t._v("面向过程性能比面向对象高。")]),t._v(" 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发。但是，"),a("strong",[t._v("面向过程没有面向对象易维护、易复用、易扩展。")])]),t._v(" "),a("li",[a("strong",[t._v("面向对象")]),t._v(" ："),a("strong",[t._v("面向对象易维护、易复用、易扩展。")]),t._v(" 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，"),a("strong",[t._v("面向对象性能比面向过程低")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"构造器-constructor-是否可被-override"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造器-constructor-是否可被-override"}},[t._v("#")]),t._v(" 构造器 constructor 是否可被 override")]),t._v(" "),a("p",[t._v("Constructor 不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。")]),t._v(" "),a("h3",{attrs:{id:"在-java-中定义一个不做事且没有参数的构造方法的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-java-中定义一个不做事且没有参数的构造方法的作用"}},[t._v("#")]),t._v(" 在 java 中定义一个不做事且没有参数的构造方法的作用")]),t._v(" "),a("p",[t._v("Java 程序在执行子类的构造方法之前，如果没有用 "),a("code",[t._v("super()")]),t._v("来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 "),a("code",[t._v("super()")]),t._v("来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。")]),t._v(" "),a("h3",{attrs:{id:"创建一个对象用什么运算符-对象实体与对象引用有何不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建一个对象用什么运算符-对象实体与对象引用有何不同"}},[t._v("#")]),t._v(" 创建一个对象用什么运算符？对象实体与对象引用有何不同？")]),t._v(" "),a("p",[t._v("new 运算符，new 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。")]),t._v(" "),a("h3",{attrs:{id:"面向对象三大特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象三大特征"}},[t._v("#")]),t._v(" 面向对象三大特征")]),t._v(" "),a("p",[t._v("封装，继承，多态")]),t._v(" "),a("p",[a("strong",[t._v("封装")]),t._v(" ：封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。")]),t._v(" "),a("p",[a("strong",[t._v("继承")]),t._v(" ：继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。")]),t._v(" "),a("p",[a("strong",[t._v("多态")]),t._v(" ：多态，顾名思义，表示一个对象具有多种的状态。具体表现为父类的引用指向子类的实例。")]),t._v(" "),a("h2",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("h4",{attrs:{id:"string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的"}},[t._v("#")]),t._v(" String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?")]),t._v(" "),a("p",[a("code",[t._v("String")]),t._v(" 类中使用 final 关键字修饰字符数组来保存字符串，"),a("code",[t._v("private final char value[]")]),t._v("，所以"),a("code",[t._v("String")]),t._v(" 对象是不可变的。")]),t._v(" "),a("p",[t._v("而 "),a("code",[t._v("StringBuilder")]),t._v(" 与 "),a("code",[t._v("StringBuffer")]),t._v(" 都继承自 "),a("code",[t._v("AbstractStringBuilder")]),t._v(" 类，在 "),a("code",[t._v("AbstractStringBuilder")]),t._v(" 中也是使用字符数组保存字符串"),a("code",[t._v("char[]value")]),t._v(" 但是没有用 "),a("code",[t._v("final")]),t._v(" 关键字修饰，所以这两种对象都是可变的。")]),t._v(" "),a("p",[a("code",[t._v("String")]),t._v(" 中的对象是不可变的，也就可以理解为常量，线程安全。"),a("code",[t._v("AbstractStringBuilder")]),t._v(" 是 "),a("code",[t._v("StringBuilder")]),t._v(" 与 "),a("code",[t._v("StringBuffer")]),t._v(" 的公共父类，定义了一些字符串的基本操作，如 "),a("code",[t._v("expandCapacity")]),t._v("、"),a("code",[t._v("append")]),t._v("、"),a("code",[t._v("insert")]),t._v("、"),a("code",[t._v("indexOf")]),t._v(" 等公共方法。"),a("code",[t._v("StringBuffer")]),t._v(" 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。"),a("code",[t._v("StringBuilder")]),t._v(" 并没有对方法进行加同步锁，所以是非线程安全的。")]),t._v(" "),a("p",[t._v("总结")]),t._v(" "),a("ol",[a("li",[t._v("操作少量的数据: 适用 "),a("code",[t._v("String")])]),t._v(" "),a("li",[t._v("单线程操作字符串缓冲区下操作大量数据: 适用 "),a("code",[t._v("StringBuilder")])]),t._v(" "),a("li",[t._v("多线程操作字符串缓冲区下操作大量数据: 适用 "),a("code",[t._v("StringBuffer")])])]),t._v(" "),a("h4",{attrs:{id:"object-类的常见方法总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-类的常见方法总结"}},[t._v("#")]),t._v(" Object 类的常见方法总结")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CloneNotSupportedException")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//naitive方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为true。Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("notifyAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，并且不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，并且不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nanos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("finalize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实例被垃圾回收器回收的时候触发的操作")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("h3",{attrs:{id:"获取键盘输入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取键盘输入"}},[t._v("#")]),t._v(" 获取键盘输入")]),t._v(" "),a("p",[t._v("方法 1：通过 Scanner")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("方法 2：通过 BufferedReader")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedReader")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedReader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStreamReader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[t._v("#")]),t._v(" 异常处理")]),t._v(" "),a("p",[t._v("整体结构图如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/09/b16188c1e2aeb.png",alt:"img"}})]),t._v(" "),a("p",[t._v("在 Java 中，所有的异常都有一个共同的祖先 "),a("code",[t._v("java.lang")]),t._v(" 包中的 "),a("code",[t._v("Throwable")]),t._v(" 类。"),a("code",[t._v("Throwable")]),t._v(" 类有两个重要的子类 "),a("code",[t._v("Exception")]),t._v("（异常）和 "),a("code",[t._v("Error")]),t._v("（错误）。"),a("code",[t._v("Exception")]),t._v(" 能被程序本身处理("),a("code",[t._v("try-catch")]),t._v(")， "),a("code",[t._v("Error")]),t._v(" 是无法处理的(只能尽量避免)。")]),t._v(" "),a("p",[a("code",[t._v("Exception")]),t._v(" 和 "),a("code",[t._v("Error")]),t._v(" 二者都是 Java 异常处理的重要子类，各自都包含大量子类。")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("Exception")])]),t._v(" :程序本身可以处理的异常，可以通过 "),a("code",[t._v("catch")]),t._v(" 来进行捕获。"),a("code",[t._v("Exception")]),t._v(" 又可以分为 受检查异常(必须处理) 和 不受检查异常(可以不处理)。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("Error")])]),t._v(" ："),a("code",[t._v("Error")]),t._v(" 属于程序无法处理的错误 ，我们没办法通过 "),a("code",[t._v("catch")]),t._v(" 来进行捕获 。例如，Java 虚拟机运行错误（"),a("code",[t._v("Virtual MachineError")]),t._v("）、虚拟机内存不够错误("),a("code",[t._v("OutOfMemoryError")]),t._v(")、类定义错误（"),a("code",[t._v("NoClassDefFoundError")]),t._v("）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。")])]),t._v(" "),a("h3",{attrs:{id:"throwable-类常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#throwable-类常用方法"}},[t._v("#")]),t._v(" Throwable 类常用方法")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("public string getMessage()")])]),t._v(":返回异常发生时的简要描述")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("public string toString()")])]),t._v(":返回异常发生时的详细信息")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("public string getLocalizedMessage()")])]),t._v(":返回异常对象的本地化信息。使用 "),a("code",[t._v("Throwable")]),t._v(" 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 "),a("code",[t._v("getMessage（）")]),t._v("返回的结果相同")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("public void printStackTrace()")])]),t._v(":在控制台上打印 "),a("code",[t._v("Throwable")]),t._v(" 对象封装的异常信息")])]),t._v(" "),a("h3",{attrs:{id:"try-catch-finally"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-finally"}},[t._v("#")]),t._v(" try-catch-finally")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("try")]),t._v("块：")]),t._v(" 用于捕获异常。其后可接零个或多个 "),a("code",[t._v("catch")]),t._v(" 块，如果没有 "),a("code",[t._v("catch")]),t._v(" 块，则必须跟一个 "),a("code",[t._v("finally")]),t._v(" 块。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("catch")]),t._v("块：")]),t._v(" 用于处理 try 捕获到的异常。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("finally")]),t._v(" 块：")]),t._v(" 无论是否捕获或处理异常，"),a("code",[t._v("finally")]),t._v(" 块里的语句都会被执行。当在 "),a("code",[t._v("try")]),t._v(" 块或 "),a("code",[t._v("catch")]),t._v(" 块中遇到 "),a("code",[t._v("return")]),t._v(" 语句时，"),a("code",[t._v("finally")]),t._v(" 语句块将在方法返回之前被执行。")])]),t._v(" "),a("p",[a("strong",[t._v("在以下 3 种特殊情况下，"),a("code",[t._v("finally")]),t._v(" 块不会被执行：")])]),t._v(" "),a("ol",[a("li",[t._v("在 "),a("code",[t._v("try")]),t._v(" 或 "),a("code",[t._v("finally")]),t._v("块中用了 "),a("code",[t._v("System.exit(int)")]),t._v("退出程序。但是，如果 "),a("code",[t._v("System.exit(int)")]),t._v(" 在异常语句之后，"),a("code",[t._v("finally")]),t._v(" 还是会被执行")]),t._v(" "),a("li",[t._v("程序所在的线程死亡。")]),t._v(" "),a("li",[t._v("关闭 CPU。")])]),t._v(" "),a("h3",{attrs:{id:"使用-try-with-resources-来代替try-catch-finally"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-try-with-resources-来代替try-catch-finally"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("try-with-resources")]),t._v(" 来代替"),a("code",[t._v("try-catch-finally")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("适用范围（资源的定义）：")]),t._v(" 任何实现 "),a("code",[t._v("java.lang.AutoCloseable")]),t._v("或者 "),a("code",[t._v("java.io.Closeable")]),t._v(" 的对象")]),t._v(" "),a("li",[a("strong",[t._v("关闭资源和 final 的执行顺序：")]),t._v(" 在 "),a("code",[t._v("try-with-resources")]),t._v(" 语句中，任何 catch 或 finally 块在声明的资源关闭后运行")])]),t._v(" "),a("p",[t._v("用法如下")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),t._v(" scanner "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scanner"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scanner"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileNotFoundException")]),t._v(" fnfe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fnfe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);