(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{497:function(t,a,e){"use strict";e.r(a);var n=e(21),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),e("h3",{attrs:{id:"什么是-spring-框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-框架"}},[t._v("#")]),t._v(" 什么是 Spring 框架?")]),t._v(" "),e("p",[t._v("我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发。这些模块是：核心容器、数据访问/集成,、Web、AOP（面向切面编程）、工具、消息和测试模块。比如：Core Container 中的 Core 组件是Spring 所有组件的核心，Beans 组件和 Context 组件是实现IOC和依赖注入的基础，AOP组件用来实现面向切面编程。")]),t._v(" "),e("p",[t._v("Spring 官网列出的 Spring 的 6 个特征:")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("核心技术")]),t._v(" ：依赖注入(DI)，AOP，事件(events)，资源，i18n，验证，数据绑定，类型转换，SpEL。")]),t._v(" "),e("li",[e("strong",[t._v("测试")]),t._v(" ：模拟对象，TestContext框架，Spring MVC 测试，WebTestClient。")]),t._v(" "),e("li",[e("strong",[t._v("数据访问")]),t._v(" ：事务，DAO支持，JDBC，ORM，编组XML。")]),t._v(" "),e("li",[e("strong",[t._v("Web支持")]),t._v(" : Spring MVC和Spring WebFlux Web框架。")]),t._v(" "),e("li",[e("strong",[t._v("集成")]),t._v(" ：远程处理，JMS，JCA，JMX，电子邮件，任务，调度，缓存。")]),t._v(" "),e("li",[e("strong",[t._v("语言")]),t._v(" ：Kotlin，Groovy，动态语言。")])]),t._v(" "),e("h3",{attrs:{id:"springboot模块结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot模块结构"}},[t._v("#")]),t._v(" springboot模块结构")]),t._v(" "),e("p",[t._v("下图对应的是 Spring4.x 版本。目前最新的5.x版本中 Web 模块的 Portlet 组件已经被废弃掉，同时增加了用于异步响应式处理的 WebFlux 组件。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/09/0161ab6a2882c.png",alt:"Spring主要模块"}})]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Spring Core：")]),t._v(" 基础,可以说 Spring 其他所有的功能都需要依赖于该类库。主要提供 IoC 依赖注入功能。")]),t._v(" "),e("li",[e("strong",[t._v("Spring Aspects")]),t._v(" ： 该模块为与AspectJ的集成提供支持。")]),t._v(" "),e("li",[e("strong",[t._v("Spring AOP")]),t._v(" ：提供了面向切面的编程实现。")]),t._v(" "),e("li",[e("strong",[t._v("Spring JDBC")]),t._v(" : Java数据库连接。")]),t._v(" "),e("li",[e("strong",[t._v("Spring JMS")]),t._v(" ：Java消息服务。")]),t._v(" "),e("li",[e("strong",[t._v("Spring ORM")]),t._v(" : 用于支持Hibernate等ORM工具。")]),t._v(" "),e("li",[e("strong",[t._v("Spring Web")]),t._v(" : 为创建Web应用程序提供支持。")]),t._v(" "),e("li",[e("strong",[t._v("Spring Test")]),t._v(" : 提供了对 JUnit 和 TestNG 测试的支持。")])]),t._v(" "),e("h2",{attrs:{id:"bean相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bean相关"}},[t._v("#")]),t._v(" Bean相关")]),t._v(" "),e("h3",{attrs:{id:"bean加载的流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bean加载的流程"}},[t._v("#")]),t._v(" Bean加载的流程")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("getBean")]),t._v("   一个bean在spring中只会加载一次，后面如果想再获取的时候，就会从缓存中获取")]),t._v(" "),e("li",[e("strong",[t._v("实例化")]),t._v("  缓存中的bean是最原始的状态，需要进行实例化，使用createBeanInstance来进行实例化")]),t._v(" "),e("li",[e("strong",[t._v("填充属性")])]),t._v(" "),e("li",[e("strong",[t._v("初始化")])])]),t._v(" "),e("h3",{attrs:{id:"spring之中bean的作用域有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring之中bean的作用域有哪些"}},[t._v("#")]),t._v(" Spring之中Bean的作用域有哪些？")]),t._v(" "),e("p",[t._v("有五种，最后一种已经没了。")]),t._v(" "),e("ol",[e("li",[t._v("singleton：默认，单例模式")]),t._v(" "),e("li",[t._v("prototype： 每次请求都会生成一个新的bean实例")]),t._v(" "),e("li",[t._v("request: 每次请求都会产生一个bean，其仅在当前的HTTP request之中有效")]),t._v(" "),e("li",[t._v("session: 每次请求都会生成一个bean，仅在当前的HTTP session之中有效。")]),t._v(" "),e("li",[t._v("global-session： 全局session作用域，仅仅在基于portlet的web应用中才有意义，Spring5已经没有了。Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与 servlet 不同，每个 portlet 都有不同的会话")])]),t._v(" "),e("h3",{attrs:{id:"spring-之中单例-bean-的线程安全问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-之中单例-bean-的线程安全问题"}},[t._v("#")]),t._v(" Spring 之中单例 bean 的线程安全问题")]),t._v(" "),e("p",[t._v("多个线程操作同一个对象的时候，对这个对象的非静态成员的变量的写操作会存在线程问题。说白了，如果你的bean之中是有”状态“——比如有一个变量，那么就会存在线程安全问题。")]),t._v(" "),e("p",[t._v("两种方法：")]),t._v(" "),e("ol",[e("li",[t._v("在Bean对象之中尽可能避免可变的成员变量——Servlet之中所有参数全在方法上，自然没有多线程问题")]),t._v(" "),e("li",[t._v("在类之中定义一个ThreadLocal，将需要可变的变量存在ThreadLocal之中。")])]),t._v(" "),e("h3",{attrs:{id:"component-和-bean-区别在哪"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#component-和-bean-区别在哪"}},[t._v("#")]),t._v(" @Component 和 @Bean 区别在哪？")]),t._v(" "),e("ol",[e("li",[t._v("对象不同：@Component 注解在类上，@Bean 注解在方法上")]),t._v(" "),e("li",[t._v("@Bean 注解比 @Component 的自定义性更强。比如引用第三方库的类需要装配到Spring容器之中时（比如@Configuration的），我们就只能使用@Bean")])]),t._v(" "),e("p",[t._v("而且如果对于一个类，我们直接使用@Component, 那么可能内部有些不需要的类我们也生成了。@Bean的控制粒度更细")]),t._v(" "),e("h3",{attrs:{id:"factorybean-和-beanfactory有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#factorybean-和-beanfactory有什么区别"}},[t._v("#")]),t._v(" FactoryBean 和 BeanFactory有什么区别？")]),t._v(" "),e("p",[t._v("BeanFactory 是 Bean 的工厂， ApplicationContext 的父类，IOC 容器的核心，负责生产和管理 Bean 对象。")]),t._v(" "),e("p",[t._v("FactoryBean 是 Bean，可以通过实现 FactoryBean 接口定制实例化 Bean 的逻辑，通过代理一个Bean对象，对方法前后做一些操作。")]),t._v(" "),e("p",[t._v("说的再直白一点就是，默认情况下我们可以直接bean factory来创建一个普通的对象。但是有些特殊情况，比如我们想自定义程度更高一点的话，我们可以使用FactoryBean来进行定义")]),t._v(" "),e("p",[t._v("参考")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/aspirant/p/9082858.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("BeanFactory 简介以及它 和FactoryBean的区别(阿里面试) - aspirant - 博客园 (cnblogs.com)"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"springbean的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springbean的生命周期"}},[t._v("#")]),t._v(" SpringBean的生命周期")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/09/8145563240d61.jpg",alt:"Spring Bean 生命周期"}})]),t._v(" "),e("ol",[e("li",[t._v("Bean 容器找到配置文件中 Spring Bean 的定义。")]),t._v(" "),e("li",[t._v("Bean 容器利用 Java Reflection API 创建一个Bean的实例。")]),t._v(" "),e("li",[t._v("如果涉及到一些属性值 利用 "),e("code",[t._v("set()")]),t._v("方法设置一些属性值。")]),t._v(" "),e("li",[t._v("如果 Bean 实现了 "),e("code",[t._v("BeanNameAware")]),t._v(" 接口，调用 "),e("code",[t._v("setBeanName()")]),t._v("方法，传入Bean的名字。")]),t._v(" "),e("li",[t._v("如果 Bean 实现了 "),e("code",[t._v("BeanClassLoaderAware")]),t._v(" 接口，调用 "),e("code",[t._v("setBeanClassLoader()")]),t._v("方法，传入 "),e("code",[t._v("ClassLoader")]),t._v("对象的实例。")]),t._v(" "),e("li",[t._v("与上面的类似，如果实现了其他 "),e("code",[t._v("*.Aware")]),t._v("接口，就调用相应的方法。")]),t._v(" "),e("li",[t._v("如果有和加载这个 Bean 的 Spring 容器相关的 "),e("code",[t._v("BeanPostProcessor")]),t._v(" 对象，执行"),e("code",[t._v("postProcessBeforeInitialization()")]),t._v(" 方法")]),t._v(" "),e("li",[t._v("如果Bean实现了"),e("code",[t._v("InitializingBean")]),t._v("接口，执行"),e("code",[t._v("afterPropertiesSet()")]),t._v("方法。")]),t._v(" "),e("li",[t._v("如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。")]),t._v(" "),e("li",[t._v("如果有和加载这个 Bean的 Spring 容器相关的 "),e("code",[t._v("BeanPostProcessor")]),t._v(" 对象，执行"),e("code",[t._v("postProcessAfterInitialization()")]),t._v(" 方法")]),t._v(" "),e("li",[t._v("当要销毁 Bean 的时候，如果 Bean 实现了 "),e("code",[t._v("DisposableBean")]),t._v(" 接口，执行 "),e("code",[t._v("destroy()")]),t._v(" 方法。")]),t._v(" "),e("li",[t._v("当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。")])]),t._v(" "),e("h3",{attrs:{id:"spring-ioc容器之中beanfactory和applicationcontext的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc容器之中beanfactory和applicationcontext的区别"}},[t._v("#")]),t._v(" Spring IoC容器之中BeanFactory和ApplicationContext的区别")]),t._v(" "),e("p",[t._v("一般而言我们推荐使用ApplicationContext，原因是：")]),t._v(" "),e("ol",[e("li",[t._v("ApplicationContext是利用Java反射机制，自动识别出配置文件之中定义的 BeanpostProcessor,InstantiationAwareBeanPostProcessor和 BeanFactoryPostProcessor（这些相当于是在Bean创建前后对Bean做点操作，比如赋个值啥的），并且"),e("strong",[t._v("自动注册")]),t._v("到应用上下文之中。而BeanFactory需要在代码之中手动调用addBeanPostProcessor()来进行注册。")]),t._v(" "),e("li",[t._v("ApplicationContext在初始化应用上下文的时候就实例化所有单实例的Bean,但是BeanFactory在初始化容器的时候没有实例化Bean，直到第一次访问某个Bean的时候才实例化目标bean")])]),t._v(" "),e("h3",{attrs:{id:"spring中的单例bean的线程安全问题了解吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring中的单例bean的线程安全问题了解吗"}},[t._v("#")]),t._v(" spring中的单例bean的线程安全问题了解吗？")]),t._v(" "),e("p",[t._v("的确是存在安全问题的。因为，当多个线程操作同一个对象的时候，对这个对象的成员变量的写操作会存在线程安全问题。")]),t._v(" "),e("p",[t._v("但是，一般情况下，我们常用的 "),e("code",[t._v("Controller")]),t._v("、"),e("code",[t._v("Service")]),t._v("、"),e("code",[t._v("Dao")]),t._v(" 这些 Bean 是无状态的。无状态的 Bean 不能保存数据，因此是线程安全的。")]),t._v(" "),e("p",[t._v("常见的有 2 种解决办法：")]),t._v(" "),e("ol",[e("li",[t._v("在类中定义一个 "),e("code",[t._v("ThreadLocal")]),t._v(" 成员变量，将需要的可变成员变量保存在 "),e("code",[t._v("ThreadLocal")]),t._v(" 中（推荐的一种方式）。")]),t._v(" "),e("li",[t._v("改变 Bean 的作用域为 “prototype”：每次请求都会创建一个新的 bean 实例，自然不会存在线程安全问题。")])]),t._v(" "),e("h3",{attrs:{id:"将一个类声明为spring的-bean-的注解有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将一个类声明为spring的-bean-的注解有哪些"}},[t._v("#")]),t._v(" 将一个类声明为spring的 bean 的注解有哪些")]),t._v(" "),e("p",[t._v("我们一般使用 "),e("code",[t._v("@Autowired")]),t._v(" 注解自动装配 bean，要想把类标识成可用于 "),e("code",[t._v("@Autowired")]),t._v(" 注解自动装配的 bean 的类,采用以下注解可实现：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("@Component")]),t._v(" ：通用的注解，可标注任意类为 "),e("code",[t._v("Spring")]),t._v(" 组件。如果一个Bean不知道属于哪个层，可以使用"),e("code",[t._v("@Component")]),t._v(" 注解标注。")]),t._v(" "),e("li",[e("code",[t._v("@Repository")]),t._v(" : 对应持久层即 Dao 层，主要用于数据库相关操作。")]),t._v(" "),e("li",[e("code",[t._v("@Service")]),t._v(" : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao层。")]),t._v(" "),e("li",[e("code",[t._v("@Controller")]),t._v(" : 对应 Spring MVC 控制层，主要用于接受用户请求并调用 Service 层返回数据给前端页面。")])]),t._v(" "),e("h2",{attrs:{id:"注解相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注解相关"}},[t._v("#")]),t._v(" 注解相关")]),t._v(" "),e("h3",{attrs:{id:"spring的-schedule注解是如何实现的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring的-schedule注解是如何实现的"}},[t._v("#")]),t._v(" spring的@Schedule注解是如何实现的")]),t._v(" "),e("p",[t._v("这个是spring内置的一个模块，整个调度模块完全依赖于"),e("code",[t._v("TaskScheduler")]),t._v("实现，更底层的是"),e("code",[t._v("JUC")]),t._v("调度线程池"),e("code",[t._v("ScheduledThreadPoolExecutor")])]),t._v(" "),e("p",[t._v("深入参考： "),e("a",{attrs:{href:"https://www.cnblogs.com/throwable/p/12616945.html#%E5%B0%8F%E7%BB%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("通过源码理解Spring中@Scheduled的实现原理并且实现调度任务动态装载"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"controller和-restcontroller区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#controller和-restcontroller区别"}},[t._v("#")]),t._v(" @Controller和@RestController区别？")]),t._v(" "),e("p",[t._v("@Controller是返回一个JSP页面，但是@RestController返回的是JSON或者XML格式的数据。")]),t._v(" "),e("p",[t._v("@RestController = @Controller + @ResponseBody")]),t._v(" "),e("h3",{attrs:{id:"transactional-rollback-exception-class-作用是"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transactional-rollback-exception-class-作用是"}},[t._v("#")]),t._v(" @Transactional(rollback=Exception.class)作用是？")]),t._v(" "),e("p",[t._v("如果不加这个，那么只有遇到"),e("code",[t._v("RuntimeException")]),t._v("才会回滚。加了的话，在非运行异常时候也会回滚。")]),t._v(" "),e("h3",{attrs:{id:"使用同一个类之中一个没有事务的方法去调用另一个有事务的方法-是否会有事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用同一个类之中一个没有事务的方法去调用另一个有事务的方法-是否会有事务"}},[t._v("#")]),t._v(" 使用"),e("code",[t._v("同一个类")]),t._v("之中一个没有事务的方法去调用另一个有事务的方法，是否会有事务？")]),t._v(" "),e("p",[t._v("答案是不会。而且和事务的传播机制没关系。")]),t._v(" "),e("h3",{attrs:{id:"resource和-autowired的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#resource和-autowired的区别"}},[t._v("#")]),t._v(" @Resource和@Autowired的区别")]),t._v(" "),e("p",[e("strong",[t._v("相同点")]),t._v("\nspring中都可以用来注入bean，同时都还可以作为注入属性的修饰。在接口仅有单一实现类时，两个注解的修饰效果是相同的，他们之间可以相互替换，不影响使用。")]),t._v(" "),e("p",[e("strong",[t._v("不同点")])]),t._v(" "),e("ul",[e("li",[t._v("@Resource是Java自己的注解，@Resource有两个主要的属性，分别是name和type；spring对@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略。而使用type属性，则是使用byType的自动注入策略。如果既不指定name属性也不指定type属性，这时将通过反射机制使用byName的自动注入策略。")]),t._v(" "),e("li",[t._v("@Autowired是spring的注解，是spring2.5版本引入的，@Autowired注解只根据type进行注入，不会去匹配name。如果涉及到根据type无法辨别的注入对象，将需要依赖@Qualifier或@Primary注解一起来修饰。")])]),t._v(" "),e("p",[t._v('平时的开发过程中呢，更常用的是@Autowired注解，因为平时百分之九十以上都是一个接口仅有一个实现类，所以用@Autowired比较方便，当然这种情况用两个中的哪一个都一样，没什么太大的区别，纯属个人习惯。但是如果是生产环境的话，架构师对这方面要求有比较严格的情况下，会让大家使用@Resource(name="xxx")这种，因为在生产环境就会要求更高的效率问题，这样使用效率是最高的，类似于根据id查询数据库一样，效率高一些。所以根据个人情况，选择性使用吧。。。')]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.jianshu.com/p/e4a899bfd18b",target:"_blank",rel:"noopener noreferrer"}},[t._v("@Resource和@Autowired的区别 - 简书 (jianshu.com)"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"配置相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置相关"}},[t._v("#")]),t._v(" 配置相关")]),t._v(" "),e("h3",{attrs:{id:"自动装配流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动装配流程"}},[t._v("#")]),t._v(" 自动装配流程")]),t._v(" "),e("p",[t._v("先简单说一下什么是自动装配吧，在没有springboot的时候，我们在写spring时，需要在xml文件中进行配置，但是有了springboot后我们就只需要加一个 "),e("code",[t._v("@SpringBootApplication")]),t._v(" 注解就可以实现自动进行依赖注入，自动读取配置文件的功能，通过全局配置文件 "),e("code",[t._v("application.properties")]),t._v("或"),e("code",[t._v("application.yml")]),t._v("即可对项目进行设置")]),t._v(" "),e("p",[t._v("这个 "),e("code",[t._v("@SpringBootApplication")]),t._v(" 里面有三个注解，这部分其实在启动流程哪里有详细的说明")]),t._v(" "),e("p",[e("a",{attrs:{href:"http://interview.xiaoyou66.com/pages/f294ae/",target:"_blank",rel:"noopener noreferrer"}},[t._v("启动流程和配置 | 面试问题浓缩总结 (xiaoyou66.com)"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("其实就是 "),e("strong",[t._v("@EnableAutoConfiguration注解")]),t._v(" (开启自动配置)，这个注解点进去后就可以看到导入自动装配选择器AutoConfigurationImportSelector")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/27/811bd2a7dfaba.png",alt:"image-20210327102754811"}})]),t._v(" "),e("p",[t._v("再点击这个类进入，就可以看到具体实现了")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/27/9270a8a273a00.png",alt:"image-20210327102943867"}})]),t._v(" "),e("p",[t._v("在loadFactoryNames方法在一个叫SpringFactoriesLoader类中，有一个地方可以加载资源")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/27/fd59c73f88a02.png",alt:"image-20210327103115393"}})]),t._v(" "),e("p",[t._v("SpringBoot的自动配置就是"),e("strong",[t._v("通过自定义实现ImportSelector接口，然后通过SpringFactoriesLoader扫描autoconfigure包下的META-INF/spring.factories中所有路径下的类，并通过反射实例化成一个个的配置类并注入到Spring容器中，从而实现了自动装配")]),t._v("，想到这里，我们其实也可以自定一个starter，然后交给SpringBoot自动来装配即可")]),t._v(" "),e("p",[t._v("参考")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/qq_40553042/article/details/109425424",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot自动装配原理与启动流程_我的鱼要死了的博客-CSDN博客_springboot启动过程"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"杂项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#杂项"}},[t._v("#")]),t._v(" 杂项")]),t._v(" "),e("h3",{attrs:{id:"springboot和spring区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot和spring区别"}},[t._v("#")]),t._v(" SpringBoot和Spring区别")]),t._v(" "),e("ul",[e("li",[t._v("SpringBoot基于spring，它帮你把spring的复杂的配置给简化了，我们可以直接使用")]),t._v(" "),e("li",[t._v("SpringBoot内置了tomcat服务器，无需再进行配置，开箱即用")])]),t._v(" "),e("h3",{attrs:{id:"spring中的设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring中的设计模式"}},[t._v("#")]),t._v(" spring中的设计模式")]),t._v(" "),e("p",[t._v("涉及到以下几种")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("1.简单工厂(非23种设计模式中的一种)")])]),t._v(" "),e("li",[e("p",[t._v("2.工厂方法")]),t._v(" "),e("p",[t._v("BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得Bean对象，但是否是在传入参数后创建还是传入参数前创建这个要根据具体情况来定")])]),t._v(" "),e("li",[e("p",[t._v("3.单例模式")]),t._v(" "),e("p",[t._v("依赖注入Bean实例默认是单例的")])]),t._v(" "),e("li",[e("p",[t._v("4.适配器模式")]),t._v(" "),e("p",[t._v("SpringMVC中的适配器HandlerAdatper（HandlerAdatper根据Handler规则执行不同的Handler）")])]),t._v(" "),e("li",[e("p",[t._v("5.装饰器模式")]),t._v(" "),e("p",[t._v("Spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator，就是动态给一个对象添加一些额外的职责")])]),t._v(" "),e("li",[e("p",[t._v("6.代理模式")]),t._v(" "),e("p",[t._v("AOP底层就是使用代理模式来实现的（包括动态代理和静态代理）")])]),t._v(" "),e("li",[e("p",[t._v("7.观察者模式")]),t._v(" "),e("p",[t._v("spring的事件驱动模型使用的是 观察者模式 ，Spring中Observer模式常用的地方是listener的实现。")])]),t._v(" "),e("li",[e("p",[t._v("8.策略模式")]),t._v(" "),e("p",[t._v("Spring框架的资源访问Resource接口。该接口提供了更强的资源访问能力，Spring 框架本身大量使用了 Resource 接口来访问底层资源。")])]),t._v(" "),e("li",[e("p",[t._v("9.模版方法模式")]),t._v(" "),e("p",[t._v("JDBC的抽象和对Hibernate的集成，都采用了一种理念或者处理方式，那就是模板方法模式与相应的Callback接口相结合。")])])]),t._v(" "),e("p",[t._v("参考："),e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/114244039",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring 中经典的 9 种设计模式，打死也要记住啊！ - 知乎 (zhihu.com)"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"maven依赖关系原则与冲突解决办法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maven依赖关系原则与冲突解决办法"}},[t._v("#")]),t._v(" Maven依赖关系原则与冲突解决办法")]),t._v(" "),e("p",[e("strong",[t._v("先说一下maven依赖处理的几个原则")]),t._v(" ：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("最短路径优先")]),t._v(" Maven 面对 D1 和 D2 时，会默认选择最短路径的那个 jar 包，即 D2。E->F->D2 比 A->B->C->D1 路径短 。")]),t._v(" "),e("li",[e("strong",[t._v("最先声明优先")]),t._v(" 如果路径一样的话，如： A->B->C1, E->F->C2 ，两个依赖路径长度都是 2，那么就选择最先声明。")])]),t._v(" "),e("p",[e("strong",[t._v("如何解决呢")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("我们可以借助Maven Helper插件中的Dependency Analyzer分析冲突的jar包，然后在对应标红版本的jar包上面点击execlude，就可以将该jar包排除出去。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/07/670e8e92d0c17.png",alt:"image-20210407164638639"}})])])]),t._v(" "),e("p",[t._v("或者手动在pom.xml中使用"),e("code",[t._v("<exclusion>")]),t._v("标签去排除冲突的jar包")]),t._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-netflix-hystrix"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1.4.4.RELEASE"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("exclusions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("exclusion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t\t\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("com.google.guava"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t\t\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("guava"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("exclusion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("exclusions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("我们可以使用 "),e("code",[t._v("mvn dependency:tree")]),t._v(" 来分析包冲突")]),t._v(" "),e("p",[t._v("参考： "),e("a",{attrs:{href:"https://blog.csdn.net/noaman_wgs/article/details/81137893",target:"_blank",rel:"noopener noreferrer"}},[t._v("Maven中 jar包冲突原理与解决办法_noaman_wgs的博客-CSDN博客"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"maven的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maven的生命周期"}},[t._v("#")]),t._v(" maven的生命周期")]),t._v(" "),e("p",[t._v("一个典型的maven的生命周期有下面这几个阶段")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/04/12/1a1af66fc285a.png",alt:"img"}})]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("验证 validate")]),t._v(" "),e("th",[t._v("验证项目")]),t._v(" "),e("th",[t._v("验证项目是否正确且所有必须信息是可用的")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("编译 compile")]),t._v(" "),e("td",[t._v("执行编译")]),t._v(" "),e("td",[t._v("源代码编译在此阶段完成")])]),t._v(" "),e("tr",[e("td",[t._v("测试 Test")]),t._v(" "),e("td",[t._v("测试")]),t._v(" "),e("td",[t._v("使用适当的单元测试框架（例如JUnit）运行测试。")])]),t._v(" "),e("tr",[e("td",[t._v("包装 package")]),t._v(" "),e("td",[t._v("打包")]),t._v(" "),e("td",[t._v("创建JAR/WAR包如在 pom.xml 中定义提及的包")])]),t._v(" "),e("tr",[e("td",[t._v("检查 verify")]),t._v(" "),e("td",[t._v("检查")]),t._v(" "),e("td",[t._v("对集成测试的结果进行检查，以保证质量达标")])]),t._v(" "),e("tr",[e("td",[t._v("安装 install")]),t._v(" "),e("td",[t._v("安装")]),t._v(" "),e("td",[t._v("安装打包的项目到本地仓库，以供其他项目使用")])]),t._v(" "),e("tr",[e("td",[t._v("部署 deploy")]),t._v(" "),e("td",[t._v("部署")]),t._v(" "),e("td",[t._v("拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程")])])])]),t._v(" "),e("p",[t._v("为了完成 default 生命周期，这些阶段（包括其他未在上面罗列的生命周期阶段）将被按顺序地执行。")]),t._v(" "),e("p",[t._v("Maven 有以下三个标准的生命周期：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("clean")]),t._v("：项目清理的处理")]),t._v(" "),e("li",[e("strong",[t._v("default(或 build)")]),t._v("：项目部署的处理")]),t._v(" "),e("li",[e("strong",[t._v("site")]),t._v("：项目站点文档创建的处理")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.runoob.com/maven/maven-build-life-cycle.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Maven 构建生命周期 | 菜鸟教程 (runoob.com)"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"springboot不同目录的加载顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot不同目录的加载顺序"}},[t._v("#")]),t._v(" springboot不同目录的加载顺序")]),t._v(" "),e("p",[t._v("Spring Boot 启动会扫描以下位置的 "),e("code",[t._v("application.properties")]),t._v(" 或者 "),e("code",[t._v("application.yml/yaml")]),t._v(" 文件作为 Spring Boot 的默认配置文件")]),t._v(" "),e("p",[t._v("（1）当前项目下的 "),e("code",[t._v("config")]),t._v(" 文件夹中；\n（2）当前项目路径的根目录下；\n（3）resource资源文件下的 "),e("code",[t._v("config")]),t._v(" 文件夹中；\n（4）resource资源文件下（项目默认创建的配置文件)。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://springboot.io/t/topic/2777",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot配置文件、静态资源不同文件目录加载优先级 - 技术交流 - SpringBoot中文社区"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"静态资源加载顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态资源加载顺序"}},[t._v("#")]),t._v(" 静态资源加载顺序")]),t._v(" "),e("p",[t._v("spring boot项目只有src目录，没有webapp目录，会将静态访问(html/图片等)映射到其自动配置的静态目录，如下")]),t._v(" "),e("ol",[e("li",[t._v("/static")]),t._v(" "),e("li",[t._v("/public")]),t._v(" "),e("li",[t._v("/resources")]),t._v(" "),e("li",[t._v("/META-INF/resources")])])])}),[],!1,null,null,null);a.default=r.exports}}]);